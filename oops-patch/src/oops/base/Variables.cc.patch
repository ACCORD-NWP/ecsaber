--- /home/benjaminm/code/oops-bundle/ecsaber/oops-patch/src/oops/base/Variables.cc.tmp.bak	2024-05-22 10:55:44.568001277 +0200
+++ /home/benjaminm/code/oops-bundle/ecsaber/oops-patch/src/oops/base/Variables.cc	2024-05-22 10:53:25.323684801 +0200
@@ -23,28 +23,29 @@
 
 // -----------------------------------------------------------------------------
 namespace oops {
+namespace patch {
 
 // -----------------------------------------------------------------------------
 
-patch::Variables::Variables(const eckit::Configuration & conf, const std::string & name)
-  : patch::VariablesBase(conf, name) {
+Variables::Variables(const eckit::Configuration & conf, const std::string & name)
+  : VariablesBase(conf, name) {
 }
 
 // -----------------------------------------------------------------------------
-patch::Variables::Variables(const std::vector<std::string> & vars)
-  : patch::VariablesBase(vars) {
+Variables::Variables(const std::vector<std::string> & vars)
+  : VariablesBase(vars) {
 }
 
 // -----------------------------------------------------------------------------
 
-patch::Variables::Variables(const eckit::Configuration & conf, const std::vector<std::string> & vars)
-  : patch::VariablesBase(vars), varMetaData_(conf)
+Variables::Variables(const eckit::Configuration & conf, const std::vector<std::string> & vars)
+  : VariablesBase(vars), varMetaData_(conf)
 {
 }
 
 // -----------------------------------------------------------------------------
 
-patch::Variables & patch::Variables::operator+=(const patch::Variables & rhs) {
+Variables & Variables::operator+=(const Variables & rhs) {
   vars_.insert(vars_.end(), rhs.vars_.begin(), rhs.vars_.end());
   // remove duplicated variables
   std::unordered_set<std::string> svars;
@@ -63,7 +64,7 @@
 
 // -----------------------------------------------------------------------------
 
-patch::Variables & patch::Variables::operator-=(const patch::Variables & rhs) {
+Variables & Variables::operator-=(const Variables & rhs) {
   for (auto & var : rhs.vars_) {
     vars_.erase(std::remove(vars_.begin(), vars_.end(), var), vars_.end());
   }
@@ -72,7 +73,7 @@
 
 // -----------------------------------------------------------------------------
 
-bool patch::Variables::operator==(const patch::Variables & rhs) const {
+bool Variables::operator==(const Variables & rhs) const {
   if (vars_.size() != rhs.vars_.size()) {
     return false;
   } else {
@@ -103,20 +104,20 @@
 
 // -----------------------------------------------------------------------------
 
-patch::Variables & patch::Variables::operator-=(const std::string & var) {
+Variables & Variables::operator-=(const std::string & var) {
   vars_.erase(std::remove(vars_.begin(), vars_.end(), var), vars_.end());
   return *this;
 }
 
 // -----------------------------------------------------------------------------
 
-bool patch::Variables::operator!=(const patch::Variables & rhs) const {
+bool Variables::operator!=(const Variables & rhs) const {
   return (!(*this == rhs));
 }
 
 // -----------------------------------------------------------------------------
 
-bool patch::Variables::operator<=(const patch::Variables & rhs) const {
+bool Variables::operator<=(const Variables & rhs) const {
   bool is_in_rhs = true;
   for (size_t jj = 0; jj < vars_.size(); ++jj) {
     is_in_rhs = is_in_rhs && rhs.has(vars_[jj]);
@@ -126,7 +127,7 @@
 
 // -----------------------------------------------------------------------------
 
-void patch::Variables::intersection(const patch::Variables & rhs) {
+void Variables::intersection(const Variables & rhs) {
   std::vector<std::string> myvars = this->asCanonical();
   std::vector<std::string> othervars = rhs.asCanonical();
   std::vector<std::string> commonvars;
@@ -137,13 +138,13 @@
 
 // -----------------------------------------------------------------------------
 
-void patch::Variables::sort() {
+void Variables::sort() {
   std::sort(vars_.begin(), vars_.end());
 }
 
 // -----------------------------------------------------------------------------
 
-void patch::Variables::print(std::ostream & os) const {
+void Variables::print(std::ostream & os) const {
   os << vars_.size() << " variables: ";
   for (size_t jj = 0; jj < vars_.size(); ++jj) {
     if (jj > 0) os << ", ";
@@ -154,7 +155,7 @@
 
 // -----------------------------------------------------------------------------
 
-bool patch::Variables::hasMetaData(const std::string & varname,
+bool Variables::hasMetaData(const std::string & varname,
                             const std::string & keyname) const {
   bool has = false;
   if (!varMetaData_.empty()) {
@@ -168,11 +169,12 @@
 
 // -----------------------------------------------------------------------------
 
-int patch::Variables::getLevels(const std::string & fieldname) const {
+int Variables::getLevels(const std::string & fieldname) const {
   int levels(-1);
   getVariableSubKeyValue(fieldname, "levels",
                          varMetaData_, levels);
   return levels;
 }
 
+}  // namespace patch
 }  // namespace oops
