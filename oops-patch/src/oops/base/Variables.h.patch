--- /home/benjaminm/code/oops-bundle/ecsaber/oops-patch/src/oops/base/Variables.h.tmp.bak	2024-05-22 10:55:44.584001315 +0200
+++ /home/benjaminm/code/oops-bundle/ecsaber/oops-patch/src/oops/base/Variables.h	2024-05-22 10:54:00.751761913 +0200
@@ -23,6 +23,7 @@
 }
 
 namespace oops {
+namespace patch {
 
 // -----------------------------------------------------------------------------
 /// \brief Class to set an container of variable names and manipulate it.
@@ -33,31 +34,31 @@
 ///
 ///        Most operators / methods do not affect/interact with the meta data.
 ///        The exceptions are:
-///         += patch::Variables;  where it updates the metadata and appends extra metadata
-///                        from the right hand side patch::Variables object.
-///         == patch::Variables;  where it compares the metadata for metadata keys that
+///         += Variables;  where it updates the metadata and appends extra metadata
+///                        from the right hand side Variables object.
+///         == Variables;  where it compares the metadata for metadata keys that
 ///                        are internally consistent with the variable names.
 ///         .addMetaData(  that will either update a value or add a value within
 ///                        some metadata for a metadata (variable name) key.
-class patch::Variables : public patch::VariablesBase {
+class Variables : public VariablesBase {
  public:
-  static const std::string classname() {return "oops::patch::Variables";}
+  static const std::string classname() {return "oops::Variables";}
 
-  patch::Variables() = default;
-  patch::Variables(const eckit::Configuration &, const std::string &);
-  explicit patch::Variables(const std::vector<std::string> &);
-  patch::Variables(const eckit::Configuration &, const std::vector<std::string> & vars);
-
-  patch::Variables & operator+=(const patch::Variables &);
-  patch::Variables & operator-=(const patch::Variables &);
-  patch::Variables & operator-=(const std::string &);
-
-  bool operator==(const patch::Variables &) const;
-  bool operator!=(const patch::Variables &) const;
-  bool operator<=(const patch::Variables &) const;
+  Variables() = default;
+  Variables(const eckit::Configuration &, const std::string &);
+  explicit Variables(const std::vector<std::string> &);
+  Variables(const eckit::Configuration &, const std::vector<std::string> & vars);
+
+  Variables & operator+=(const Variables &);
+  Variables & operator-=(const Variables &);
+  Variables & operator-=(const std::string &);
+
+  bool operator==(const Variables &) const;
+  bool operator!=(const Variables &) const;
+  bool operator<=(const Variables &) const;
 
-  /// make this patch::Variables an intersection between this patch::Variables and other variables
-  void intersection(const patch::Variables & other);
+  /// make this Variables an intersection between this Variables and other variables
+  void intersection(const Variables & other);
 
   const eckit::Configuration & variablesMetaData() const {return varMetaData_;}
 
@@ -98,7 +99,7 @@
 // -----------------------------------------------------------------------------
 
 template<typename T>
-void patch::Variables::addMetaData(const std::string & varname,
+void Variables::addMetaData(const std::string & varname,
                             const std::string & keyname,
                             const T & keyvalue) {
   setVariableSubKeyValue(varname, keyname, keyvalue, varMetaData_);
@@ -107,7 +108,7 @@
 // -----------------------------------------------------------------------------
 
 template<typename T>
-T patch::Variables::getMetaData(const std::string & varname,
+T Variables::getMetaData(const std::string & varname,
                          const std::string & keyname) const {
   T keyvalue;
   getVariableSubKeyValue(varname, keyname, varMetaData_, keyvalue);
@@ -117,7 +118,7 @@
 // -----------------------------------------------------------------------------
 
 template<typename T>
-void patch::Variables::getVariableSubKeyValue(const std::string & varname,
+void Variables::getVariableSubKeyValue(const std::string & varname,
                                        const std::string & keyname,
                                        const eckit::Configuration & variablesconf,
                                        T & keyvalue) const {
@@ -130,7 +131,7 @@
 // -----------------------------------------------------------------------------
 
 template<typename T>
-void patch::Variables::setVariableSubKeyValue(const std::string & varname,
+void Variables::setVariableSubKeyValue(const std::string & varname,
                                        const std::string & keyname,
                                        const T & keyvalue,
                                        eckit::LocalConfiguration & variableslconf) {
@@ -143,6 +144,7 @@
 
 // -----------------------------------------------------------------------------
 
+}  // namespace patch
 }  // namespace oops
 
 #endif  // OOPS_BASE_VARIABLES_H_
