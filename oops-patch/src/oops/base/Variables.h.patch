--- /home/benjaminm/code/oops-bundle/ecsaber/oops-patch/src/oops/base/Variables.h.tmp.bak	2024-03-07 12:39:56.568680485 +0100
+++ /home/benjaminm/code/oops-bundle/ecsaber/oops-patch/src/oops/base/Variables.h	2024-03-07 12:30:14.436224980 +0100
@@ -13,6 +13,7 @@
 #include <vector>
 
 #include "eckit/config/LocalConfiguration.h"
+#include "eckit/exception/Exceptions.h"
 
 #include "oops/util/Printable.h"
 
@@ -21,6 +22,7 @@
 }
 
 namespace oops {
+namespace patch {
 
 // -----------------------------------------------------------------------------
 /// \brief Class to set an container of variable names and manipulate it.
@@ -35,43 +37,39 @@
 ///
 ///        Most operators / methods do not affect/interact with the meta data.
 ///        The exceptions are:
-///         += patch::Variables;  where it updates the metadata and appends extra metadata
-///                        from the right hand side patch::Variables object.
-///         == patch::Variables;  where it compares the metadata for metadata keys that
+///         += Variables;  where it updates the metadata and appends extra metadata
+///                        from the right hand side Variables object.
+///         == Variables;  where it compares the metadata for metadata keys that
 ///                        are internally consistent with the variable names.
 ///         .addMetaData(  that will either update a value or add a value within
 ///                        some metadata for a metadata (variable name) key.
-class patch::Variables : public util::Printable {
+class Variables : public util::Printable {
  public:
-  static const std::string classname() {return "oops::patch::Variables";}
+  static const std::string classname() {return "oops::Variables";}
 
-  patch::Variables();
-  patch::Variables(const eckit::Configuration &, const std::string &);
-  explicit patch::Variables(const std::vector<std::string> &, const std::string & conv = "");
-  patch::Variables(const std::vector<std::string> & vars, const std::vector<int> & channels);
-  patch::Variables(const eckit::Configuration &, const std::vector<std::string> & vars);
-
-  patch::Variables(const patch::Variables &);
-  patch::Variables & operator+=(const patch::Variables &);
-  patch::Variables & operator-=(const patch::Variables &);
-  patch::Variables & operator-=(const std::string &);
+  Variables();
+  Variables(const eckit::Configuration &, const std::string &);
+  explicit Variables(const std::vector<std::string> &, const std::string & conv = "");
+  Variables(const std::vector<std::string> & vars, const std::vector<int> & channels);
+  Variables(const eckit::Configuration &, const std::vector<std::string> & vars);
+
+  Variables(const Variables &);
+  Variables & operator+=(const Variables &);
+  Variables & operator-=(const Variables &);
+  Variables & operator-=(const std::string &);
 
   size_t size() const {return vars_.size();}
   const std::string & operator[](const size_t kk) const {return vars_.at(kk);}
-  bool operator==(const patch::Variables &) const;
-  bool operator!=(const patch::Variables &) const;
-  bool operator<=(const patch::Variables &) const;
-
-  void addMetaData(const std::string & varname,
-                   const std::string & keyname,
-                   const int & keyvalue);
+  bool operator==(const Variables &) const;
+  bool operator!=(const Variables &) const;
+  bool operator<=(const Variables &) const;
 
   bool has(const std::string &) const;
 
   size_t find(const std::string &) const;
 
-  /// make this patch::Variables an intersection between this patch::Variables and other variables
-  void intersection(const patch::Variables & other);
+  /// make this Variables an intersection between this Variables and other variables
+  void intersection(const Variables & other);
 
   const std::vector<std::string> & variables() const {return vars_;}
   const std::vector<int> & channels() const {return channels_;}
@@ -80,6 +78,17 @@
   void push_back(const std::string &);
   void sort();
 
+  // Metadata
+  bool hasMetaData(const std::string & varname,
+                   const std::string & keyname) const;
+  template<typename T>
+  void addMetaData(const std::string & varname,
+                   const std::string & keyname,
+                   const T & keyvalue);
+  template<typename T>
+  T getMetaData(const std::string & varname,
+                const std::string & keyname) const;
+  // TODO(Later): might be replaced with getMetaData<int>(varname, "levels")
   int getLevels(const std::string &) const;
 
  private:
@@ -88,14 +97,16 @@
   /// returns sorted variable names
   std::vector<std::string> asCanonical() const;
 
+  template<typename T>
   void getVariableSubKeyValue(const std::string & varname,
                               const std::string & keyname,
                               const eckit::Configuration & conf,
-                              int & intvalue) const;
+                              T & keyvalue) const;
 
+  template<typename T>
   void setVariableSubKeyValue(const std::string & varname,
                               const std::string & keyname,
-                              const int & keyvalue,
+                              const T & keyvalue,
                               eckit::LocalConfiguration & lconf);
 
   std::string convention_;
@@ -106,6 +117,53 @@
 
 // -----------------------------------------------------------------------------
 
+template<typename T>
+void Variables::addMetaData(const std::string & varname,
+                            const std::string & keyname,
+                            const T & keyvalue) {
+  setVariableSubKeyValue(varname, keyname, keyvalue, varMetaData_);
+}
+
+// -----------------------------------------------------------------------------
+
+template<typename T>
+T Variables::getMetaData(const std::string & varname,
+                         const std::string & keyname) const {
+  T keyvalue;
+  getVariableSubKeyValue(varname, keyname, varMetaData_, keyvalue);
+  return keyvalue;
+}
+
+// -----------------------------------------------------------------------------
+
+template<typename T>
+void Variables::getVariableSubKeyValue(const std::string & varname,
+                                       const std::string & keyname,
+                                       const eckit::Configuration & variablesconf,
+                                       T & keyvalue) const {
+  ASSERT(!variablesconf.empty());
+  ASSERT(variablesconf.has(varname));
+  ASSERT(variablesconf.getSubConfiguration(varname).has(keyname));
+  variablesconf.getSubConfiguration(varname).get(keyname, keyvalue);
+}
+
+// -----------------------------------------------------------------------------
+
+template<typename T>
+void Variables::setVariableSubKeyValue(const std::string & varname,
+                                       const std::string & keyname,
+                                       const T & keyvalue,
+                                       eckit::LocalConfiguration & variableslconf) {
+  eckit::LocalConfiguration variablelconf =
+    variableslconf.has(varname) ? variableslconf.getSubConfiguration(varname) :
+                                  eckit::LocalConfiguration();
+  variablelconf.set(keyname, keyvalue);
+  variableslconf.set(varname, variablelconf);
+}
+
+// -----------------------------------------------------------------------------
+
+}  // namespace patch
 }  // namespace oops
 
 #endif  // OOPS_BASE_VARIABLES_H_
