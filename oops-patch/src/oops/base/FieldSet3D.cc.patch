--- /home/benjaminm/code/oops-bundle/ecsaber/oops-patch/src/oops/base/FieldSet3D.cc.tmp.bak	2024-05-24 08:40:38.050815676 +0200
+++ /home/benjaminm/code/oops-bundle/ecsaber/oops-patch/src/oops/base/FieldSet3D.cc	2024-05-24 08:40:06.318739509 +0200
@@ -16,10 +16,13 @@
 
 #include "eckit/exception/Exceptions.h"
 
+#include "oops/util/dateFunctions.h"
 #include "oops/util/FieldSetHelpers.h"
 #include "oops/util/FieldSetOperations.h"
 #include "oops/util/Logger.h"
 
+namespace df = util::datefunctions;
+
 namespace oops {
 
 // -----------------------------------------------------------------------------
@@ -74,7 +77,7 @@
 FieldSet3D randomFieldSet3D(const util::DateTime & validTime,
                             const eckit::mpi::Comm & comm,
                             const atlas::FunctionSpace & fspace,
-                            const JediVariables & vars) {
+                            const JediVariables & vars) {
   FieldSet3D random(validTime, comm);
   random.randomInit(fspace, vars);
   return random;
@@ -150,14 +153,14 @@
 // -----------------------------------------------------------------------------
 
 void FieldSet3D::init(const atlas::FunctionSpace & fspace,
-                      const JediVariables & vars) {
+                      const JediVariables & vars) {
   fset_ = util::createFieldSet(fspace, vars);
 }
 
 // -----------------------------------------------------------------------------
 
 void FieldSet3D::init(const atlas::FunctionSpace & fspace,
-                      const JediVariables & vars,
+                      const JediVariables & vars,
                       const double & value) {
   fset_ = util::createFieldSet(fspace, vars, value);
 }
@@ -165,14 +168,14 @@
 // -----------------------------------------------------------------------------
 
 void FieldSet3D::randomInit(const atlas::FunctionSpace & fspace,
-                            const JediVariables & vars) {
+                            const JediVariables & vars) {
   fset_ = util::createRandomFieldSet(comm_, fspace, vars);
 }
 
 // -----------------------------------------------------------------------------
 
-JediVariables FieldSet3D::currentVariables() const {
-  JediVariables vars;
+JediVariables FieldSet3D::currentVariables() const {
+  JediVariables vars;
   for (const auto & field : fset_) {
     vars.push_back(field.name());
     vars.addMetaData(field.name(), "levels", field.shape(1));
@@ -182,7 +185,7 @@
 
 // -----------------------------------------------------------------------------
 
-const oops::JediVariables & FieldSet3D::variables() const {
+const oops::JediVariables & FieldSet3D::variables() const {
   vars_ = currentVariables();
   return vars_;
 }
@@ -230,13 +233,13 @@
 
 // -----------------------------------------------------------------------------
 
-double FieldSet3D::dot_product_with(const FieldSet3D & other, const JediVariables & vars) const {
+double FieldSet3D::dot_product_with(const FieldSet3D & other, const JediVariables & vars) const {
   return util::dotProductFieldSets(fset_, other.fieldSet(), vars.variables(), comm_);
 }
 
 // -----------------------------------------------------------------------------
 
-double FieldSet3D::norm(const JediVariables & vars) const {
+double FieldSet3D::norm(const JediVariables & vars) const {
   return util::normFieldSet(fset_, vars.variables(), comm_);
 }
 
@@ -249,7 +252,7 @@
 // -----------------------------------------------------------------------------
 
 void FieldSet3D::read(const atlas::FunctionSpace & fspace,
-                      const JediVariables & vars,
+                      const JediVariables & vars,
                       const eckit::LocalConfiguration & conf) {
   util::readFieldSet(comm_, fspace, vars, conf, fset_);
 }
@@ -274,7 +277,7 @@
 
 size_t FieldSet3D::serialSize() const {
   // size of valid time + number of variables
-  size_t fset_size = validTime_.serialSize() + 1;
+  size_t fset_size = 2 + 1;
   for (const auto & field : fset_) {
     assert(field.rank() == 2);
     // size of field + dimension sizes (2) + variable name hash (1)
@@ -291,7 +294,10 @@
   vect.reserve(vect.size() + fset_size);
 
   // serialize valid time and number of variables
-  validTime_.serialize(vect);
+  int year, month, day, hour, minute, second;
+  validTime_.toYYYYMMDDhhmmss(year, month, day, hour, minute, second);
+  vect.push_back(static_cast<double>(df::dateToJulian(year, month, day)));
+  vect.push_back(static_cast<double>(df::hmsToSeconds(hour, minute, second)));
   vect.push_back(fset_.size());
 
   static_assert(sizeof(double) == sizeof(size_t));
@@ -316,8 +322,11 @@
 // -----------------------------------------------------------------------------
 
 void FieldSet3D::deserialize(const std::vector<double> & vect, size_t & index) {
-  util::DateTime other_time;
-  other_time.deserialize(vect, index);
+  int year, month, day, hour, minute, second;
+  df::julianToDate(std::lround(vect.at(index)), year, month, day);
+  df::secondToHms(std::lround(vect.at(index+1)), hour, minute, second);
+  index += 2;
+  util::DateTime other_time(year, month, day, hour, minute, second);
   if (other_time != validTime_) {
     // All current use cases for this method are needed for fieldsets at different
     // times to handle 4D aspects in covariances: issue a warning that the dates are
@@ -362,7 +371,7 @@
 
 // -----------------------------------------------------------------------------
 
-void FieldSet3D::removeFields(const JediVariables & vars) {
+void FieldSet3D::removeFields(const JediVariables & vars) {
   util::removeFieldsFromFieldSet(fset_, vars.variables());
 }
 
