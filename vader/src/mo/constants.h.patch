--- /home/benjaminm/code/oops-bundle/ecsaber/vader/src/mo/constants.h.tmp	2024-07-15 09:43:07.135223172 +0200
+++ /home/benjaminm/code/oops-bundle/ecsaber/vader/src/mo/constants.h	2024-07-15 09:25:30.794221627 +0200
@@ -28,18 +28,18 @@
   static constexpr int svpLookUpLength =
     static_cast<int>((THiBound - TLoBound + deps) / Tinc) + 1;
 
-  static constexpr std::size_t mioBins = 21;
-  static constexpr std::size_t mioLevs = 40;
-  static constexpr std::size_t mioLookUpLength = mioLevs * mioBins;
-  static constexpr std::double_t rHTBin = 5.0;     // done as a percentage!
-  static constexpr std::double_t MinRhRef = 0.0;
-  static constexpr std::double_t MaxRhRef = 150.0;
-  static constexpr std::double_t rHTLastBinLowerLimit = (mioBins - 1) * rHTBin;  // in percentage
-  static constexpr std::double_t TolMonotonicity = 1.0;
-  static constexpr std::double_t effectiveRNegative = 5.0;
+  static constexpr size_t mioBins = 21;
+  static constexpr size_t mioLevs = 40;
+  static constexpr size_t mioLookUpLength = mioLevs * mioBins;
+  static constexpr double rHTBin = 5.0;     // done as a percentage!
+  static constexpr double MinRhRef = 0.0;
+  static constexpr double MaxRhRef = 150.0;
+  static constexpr double rHTLastBinLowerLimit = (mioBins - 1) * rHTBin;  // in percentage
+  static constexpr double TolMonotonicity = 1.0;
+  static constexpr double effectiveRNegative = 5.0;
 
   // tolerance for avoiding division by zero in eval_mio_fields_nl
-  static constexpr std::double_t tol = 1.0e-5;
+  static constexpr double tol = 1.0e-5;
 
   static constexpr double p_zero = 1.0e5;
   static constexpr double zerodegc = 273.15;             // conversion between degrees Celsius
