--- /home/benjaminm/code/oops-bundle/ecsaber/saber/src/saber/blocks/SaberOuterBlockBase.h.tmp.bak	2024-10-03 15:19:12.565116843 +0200
+++ /home/benjaminm/code/oops-bundle/ecsaber/saber/src/saber/blocks/SaberOuterBlockBase.h	2024-10-03 15:21:35.170740498 +0200
@@ -18,9 +18,9 @@
 #include "eckit/exception/Exceptions.h"
 
 #include "oops/base/FieldSets.h"
-#include "oops/base/Geometry.h"
+#include "oops/interface/Geometry.h"
 #include "oops/base/GeometryData.h"
-#include "oops/base/Increment.h"
+#include "oops/interface/Increment.h"
 #include "oops/base/Variables.h"
 #include "oops/util/AssociativeContainers.h"
 #include "oops/util/DateTime.h"
@@ -34,6 +34,7 @@
 #include "oops/util/Printable.h"
 
 #include "saber/blocks/SaberBlockParametersBase.h"
+#include "saber/oops/ECUtilities.h"
 
 namespace oops {
   class FieldSet3D;
@@ -279,13 +280,16 @@
     } else {
       incVars.reset(new oops::JediVariables(vars));
     }
-    oops::Increment<MODEL> dx(geom, *incVars, validTime_);
+    oops::Variables<MODEL> varsT(templatedVarsConf(*incVars));
+    oops::Increment<MODEL> dx(geom, varsT, validTime_);
 
     // Read, print norm and push_back
     dx.read(input.second);
     oops::Log::test() << "Norm of input parameter " << input.first
                       << ": " << dx.norm() << std::endl;
-    fsetVec.push_back(dx.fieldSet());
+    oops::FieldSet3D fset(validTime_, geom.geometry().getComm());
+    fset.deepCopy(dx.increment().fieldSet());
+    fsetVec.push_back(fset);
     fsetVec.back().name() = input.first;
   }
   this->setReadFields(fsetVec);
@@ -315,10 +319,11 @@
     } else {
       incVars.reset(new oops::JediVariables(vars));
     }
-    oops::Increment<MODEL> dx(geom, *incVars, validTime_);
+    oops::Variables<MODEL> varsT(templatedVarsConf(*incVars));
+    oops::Increment<MODEL> dx(geom, varsT, validTime_);
 
     // Write and print norm
-    dx.fromFieldSet(output.second.fieldSet());
+    dx.increment().fromFieldSet(output.second.fieldSet());
     oops::Log::test() << "Norm of output parameter " << output.second.name()
                       << ": " << dx.norm() << std::endl;
     dx.write(output.first);
