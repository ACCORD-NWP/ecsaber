--- /home/benjaminm/code/oops-bundle/ecsaber/saber/src/saber/blocks/SaberParametricBlockChain.h.tmp.bak	2024-05-06 14:08:00.074271901 +0200
+++ /home/benjaminm/code/oops-bundle/ecsaber/saber/src/saber/blocks/SaberParametricBlockChain.h	2024-05-06 14:01:45.101116262 +0200
@@ -101,6 +101,8 @@
   size_t size4D_;
   oops::JediVariables centralVars_;
   atlas::FunctionSpace centralFunctionSpace_;
+  std::unique_ptr<oops::GeometryData> geomData_;
+  std::unique_ptr<oops::GeometryData> dualResGeomData_;
 };
 
 // -----------------------------------------------------------------------------
@@ -117,9 +119,14 @@
                        oops::FieldSets & fsetDualResEns,
                        const eckit::LocalConfiguration & covarConf,
                        const eckit::Configuration & conf)
-  : outerFunctionSpace_(geom.functionSpace()), outerVariables_(outerVars),
+  : outerFunctionSpace_(geom.geometry().functionSpace()), outerVariables_(outerVars),
   crossTimeCov_(covarConf.getString("time covariance") == "multivariate duplicated"),
-  timeComm_(fset4dXb.commTime()), size4D_(fset4dXb.size()) {
+  timeComm_(fset4dXb.commTime()), size4D_(fset4dXb.size()),
+  geomData_(new oops::GeometryData(geom.geometry().functionSpace(), geom.geometry().fields(),
+  geom.geometry().levelsAreTopDown(), geom.geometry().getComm())),
+  dualResGeomData_(new oops::GeometryData(dualResGeom.geometry().functionSpace(),
+  dualResGeom.geometry().fields(), dualResGeom.geometry().levelsAreTopDown(),
+  geom.geometry().getComm())) {
   oops::Log::trace() << "SaberParametricBlockChain ctor starting" << std::endl;
 
   // If needed create outer block chain
@@ -137,7 +144,7 @@
 
   // Set outer geometry data for central block
   const oops::GeometryData & currentOuterGeom = outerBlockChain_ ?
-                             outerBlockChain_->innerGeometryData() : geom.generic();
+                             outerBlockChain_->innerGeometryData() : *geomData_;
 
   SaberCentralBlockParametersWrapper saberCentralBlockParamsWrapper;
   saberCentralBlockParamsWrapper.deserialize(conf.getSubConfiguration("saber central block"));
@@ -178,7 +185,7 @@
 
       for (size_t ie = 0; ie < nens; ++ie) {
         // Read ensemble member
-        oops::FieldSet3D fset(fset4dXb[0].validTime(), geom.getComm());
+        oops::FieldSet3D fset(fset4dXb[0].validTime(), geom.geometry().getComm());
         readEnsembleMember(geom, outerVariables_, ensembleConf, ie, fset);
 
         // Apply outer blocks inverse (all of them)
@@ -209,7 +216,7 @@
     oops::Log::info() << "Info     : Dual resolution setup" << std::endl;
 
     // Dual resolution setup
-    centralBlock_->dualResolutionSetup(dualResGeom.generic());
+    centralBlock_->dualResolutionSetup(*dualResGeomData_);
 
     // Ensemble configuration
     eckit::LocalConfiguration dualResEnsembleConf
@@ -227,7 +234,7 @@
 
       for (size_t ie = 0; ie < dualResNens; ++ie) {
         // Read ensemble member
-        oops::FieldSet3D fset(fset4dXb[0].validTime(), dualResGeom.getComm());
+        oops::FieldSet3D fset(fset4dXb[0].validTime(), geom.geometry().getComm());
         readEnsembleMember(dualResGeom, outerVariables_, dualResEnsembleConf, ie, fset);
 
         // Use FieldSet in the central block
@@ -258,18 +265,18 @@
     const eckit::LocalConfiguration outputEnsembleConf(covarConf, "output ensemble");
 
     // Check whether geometry grid is similar to the last outer block inner geometry
-    const bool useModelWriter = (util::getGridUid(geom.functionSpace())
+    const bool useModelWriter = (util::getGridUid(geom.geometry().functionSpace())
       == util::getGridUid(currentOuterGeom.functionSpace()));
 
     // Get ensemble size
     size_t ensembleSize = ensembleConf.getInt("ensemble size");
 
     // Estimate mean
-    oops::FieldSet3D fsetMean(fset4dXb[0].validTime(), geom.getComm());
+    oops::FieldSet3D fsetMean(fset4dXb[0].validTime(), geom.geometry().getComm());
     if (iterativeEnsembleLoading) {
       for (size_t ie = 0; ie < ensembleSize; ++ie) {
         // Read member
-        oops::FieldSet3D fsetMem(fset4dXb[0].validTime(), geom.getComm());
+        oops::FieldSet3D fsetMem(fset4dXb[0].validTime(), geom.geometry().getComm());
         readEnsembleMember(geom, activeVars, ensembleConf, ie, fsetMem);
 
         // Update mean
@@ -292,14 +299,16 @@
 
     for (size_t ie = 0; ie < ensembleSize; ++ie) {
       oops::Log::info() << "Info     : Write member " << ie << std::endl;
+      // Create variables
+      oops::Variables<MODEL> activeVarsT(templatedVarsConf(activeVars));
 
       // Increment pointer
-      oops::Increment<MODEL> dx(geom, activeVars, fset4dXb[0].validTime());
+      oops::Increment<MODEL> dx(geom, activeVarsT, fset4dXb[0].validTime());
 
       // Get ensemble member
       if (iterativeEnsembleLoading) {
         // Read ensemble member
-        oops::FieldSet3D fset(fset4dXb[0].validTime(), geom.getComm());
+        oops::FieldSet3D fset(fset4dXb[0].validTime(), geom.geometry().getComm());
         readEnsembleMember(geom, activeVars, ensembleConf, ie, fset);
 
         // Remove mean
@@ -309,10 +318,10 @@
         if (outerBlockChain_) outerBlockChain_->leftInverseMultiply(fset);
 
         // ATLAS fieldset to Increment_
-        dx.fromFieldSet(fset.fieldSet());
+        dx.increment().fromFieldSet(fset.fieldSet());
       } else {
         // ATLAS fieldset to Increment_
-        dx.fromFieldSet(fsetEns[ie].fieldSet());
+        dx.increment().fromFieldSet(fsetEns[ie].fieldSet());
       }
 
       if (useModelWriter) {
