--- /home/benjaminm/code/oops-bundle/ecsaber/saber/src/saber/oops/ProcessPerts.h.tmp	2024-07-19 08:41:30.607709107 +0200
+++ /home/benjaminm/code/oops-bundle/ecsaber/saber/src/saber/oops/ProcessPerts.h	2024-07-19 08:50:22.588055929 +0200
@@ -1,5 +1,5 @@
 /*
- * (C) Crown Copyright 2023-2024 Met Office
+ * (C) Crown Copyright 2023 Met Office
  *
  * This software is licensed under the terms of the Apache Licence Version 2.0
  * which can be obtained at http://www.apache.org/licenses/LICENSE-2.0.
@@ -7,6 +7,8 @@
 
 #pragma once
 
+#include <omp.h>
+
 #include <algorithm>
 #include <map>
 #include <memory>
@@ -19,12 +21,14 @@
 #include "eckit/exception/Exceptions.h"
 
 #include "oops/base/FieldSets.h"
-#include "oops/base/Geometry.h"
-#include "oops/base/Increment.h"
-#include "oops/base/instantiateCovarFactory.h"
-#include "oops/base/ModelSpaceCovarianceBase.h"
-#include "oops/base/State.h"
-#include "oops/base/Variables.h"
+#include "oops/base/Increment4D.h"
+#include "oops/base/State4D.h"
+#include "oops/interface/Geometry.h"
+#include "oops/interface/Increment.h"
+#include "oops/interface/Model.h"
+#include "oops/interface/State.h"
+#include "oops/interface/Variables.h"
+#include "oops/runs/Application.h"
 #include "oops/mpi/mpi.h"
 #include "oops/runs/Application.h"
 #include "oops/util/ConfigFunctions.h"
@@ -38,6 +42,9 @@
 
 #include "saber/blocks/SaberParametricBlockChain.h"
 #include "saber/oops/ErrorCovarianceParameters.h"
+#include "saber/oops/instantiateCovarFactory.h"
+
+#include "saber/oops/ECUtilities.h"
 #include "saber/oops/Utilities.h"
 
 namespace saber {
@@ -108,7 +115,6 @@
   OOPS_CONCRETE_PARAMETERS(OutputWriteParameters, oops::Parameters)
 
  public:
-  typedef typename oops::Increment<MODEL>::WriteParameters_  IncrementWriteParameters_;
   typedef ErrorCovarianceParameters<MODEL>                   ErrorCovarianceParameters_;
 
   // This is there to get ErrorCovarianceParameters and in particular
@@ -121,7 +127,7 @@
     genericWrite{"generic write", this};
 
   /// Write parameters using model increment writer
-  oops::OptionalParameter<IncrementWriteParameters_>
+  oops::OptionalParameter<eckit::LocalConfiguration>
     modelWrite{"model write", this};
 };
 
@@ -143,22 +149,19 @@
 
 /// \brief Top-level options taken by the ProcessPerts application.
 template <typename MODEL> class ProcessPertsParameters :
-  public oops::ApplicationParameters {
-  OOPS_CONCRETE_PARAMETERS(ProcessPertsParameters, oops::ApplicationParameters)
+  public oops::Parameters {
+  OOPS_CONCRETE_PARAMETERS(ProcessPertsParameters, oops::Parameters)
 
  public:
-  typedef oops::ModelSpaceCovarianceParametersWrapper<MODEL> CovarianceParameters_;
-
-  typedef typename oops::Geometry<MODEL>::Parameters_    GeometryParameters_;
   typedef BandParameters<MODEL>                          BandParameters_;
 
   /// Geometry parameters.
-  oops::RequiredParameter<GeometryParameters_> geometry{"geometry", this};
+  oops::RequiredParameter<eckit::LocalConfiguration> geometry{"resolution", this};
 
   /// Background parameters.
-  oops::RequiredParameter<eckit::LocalConfiguration> background{"background", this};
+  oops::RequiredParameter<eckit::LocalConfiguration> background{"Background", this};
 
-  oops::RequiredParameter<oops::JediVariables> inputVariables{"input variables", this};
+  oops::RequiredParameter<eckit::LocalConfiguration> inputVariables{"input variables", this};
 
   oops::RequiredParameter<std::vector<BandParameters_>> bands{"bands", this};
 
@@ -172,49 +175,76 @@
 template <typename MODEL> class ProcessPerts : public oops::Application {
   typedef oops::ModelSpaceCovarianceBase<MODEL>             CovarianceBase_;
   typedef oops::CovarianceFactory<MODEL>                    CovarianceFactory_;
-  typedef oops::ModelSpaceCovarianceParametersBase<MODEL>   CovarianceParametersBase_;
   typedef oops::Geometry<MODEL>                             Geometry_;
   typedef oops::Increment<MODEL>                            Increment_;
+  typedef oops::Increment4D<MODEL>                          Increment4D_;
+  typedef oops::Model<MODEL>                                Model_;
   typedef oops::State<MODEL>                                State_;
   typedef oops::State4D<MODEL>                              State4D_;
-  typedef typename oops::Increment<MODEL>::WriteParameters_ IncrementWriteParameters_;
+  typedef oops::Variables<MODEL>                            Variables_;
   typedef ProcessPertsParameters<MODEL>                     ProcessPertsParameters_;
 
  public:
 // -----------------------------------------------------------------------------
-  explicit ProcessPerts(const eckit::mpi::Comm & comm = eckit::mpi::comm()) :
-    Application(comm) {
+  ProcessPerts() {
     instantiateCovarFactory<MODEL>();
   }
 // -----------------------------------------------------------------------------
   virtual ~ProcessPerts() {}
 // -----------------------------------------------------------------------------
 
-  int execute(const eckit::Configuration & fullConfig, bool validate) const override {
+  int execute(const eckit::Configuration & fullConfig) const {
     // Deserialize parameters
     ProcessPertsParameters_ params;
-    if (validate) params.validate(fullConfig);
+    params.validate(fullConfig);
     params.deserialize(fullConfig);
 
     // Define space and time communicators
-    const eckit::mpi::Comm * commSpace = &this->getComm();
-    const eckit::mpi::Comm * commTime = &oops::mpi::myself();
+    const eckit::mpi::Comm * commSpace = &eckit::mpi::comm();
+
+    // Get number of MPI tasks and OpenMP threads
+    size_t ntasks = commSpace->size();
+    size_t nthreads = 1;
+#ifdef _OPENMP
+    # pragma omp parallel
+    {
+      nthreads = omp_get_num_threads();
+    }
+#endif
+
+    // Replace patterns in full configuration and deserialize parameters
+    eckit::LocalConfiguration fullConfigUpdated(fullConfig);
+    util::seekAndReplace(fullConfigUpdated, "_MPI_", std::to_string(ntasks));
+    util::seekAndReplace(fullConfigUpdated, "_OMP_", std::to_string(nthreads));
+    params.deserialize(fullConfigUpdated);
+
+    // Set precision for test channel
+    oops::Log::test() << std::scientific
+                      << std::setprecision(std::numeric_limits<double>::digits10+1);
 
     // Setup geometry
-    const Geometry_ geom(params.geometry, *commSpace, *commTime);
+    const Geometry_ geom(params.geometry);
+
+    // Setup model
+    eckit::LocalConfiguration modelConf;
+    if (fullConfigUpdated.has("model")) {
+      modelConf = fullConfigUpdated.getSubConfiguration("model");
+    }
+    const Model_ model(geom, modelConf);
 
     // Setup background
-    const State4D_ xx(geom, params.background, *commTime);
+    const State4D_ xx(params.background, geom, model);
     oops::FieldSet4D fsetXb(xx);
     oops::FieldSet4D fsetFg(xx);
 
     // Setup time
     const util::DateTime time = xx[0].validTime();
 
-    oops::JediVariables incVars = params.inputVariables;
+    const Variables_ incVarsT(params.inputVariables);
+    oops::JediVariables incVars(incVarsT.variables().variablesList());
 
     // Initialize outer variables
-    const std::vector<std::size_t> vlevs = geom.variableSizes(incVars);
+    const std::vector<std::size_t> vlevs = geom.geometry().variableSizes(incVarsT.variables());
     for (std::size_t i = 0; i < vlevs.size() ; ++i) {
       incVars[i].setLevels(vlevs[i]);
     }
@@ -372,25 +402,25 @@
           eckit::LocalConfiguration gconf = it->second;
           util::setMember(gconf, jm+1);
           setConcatenatedString(fullConfig,
-                                std::vector<std::string>{"geometry", "grid"},
+                                std::vector<std::string>{"resolution", "grid"},
                                 "grid pattern",
                                 gconf);
-          util::writeFieldSet(geom.getComm(), gconf, fset4dDx[0].fieldSet());
+          util::writeFieldSet(geom.geometry().getComm(), gconf, fset4dDx[0].fieldSet());
         }
 
         if (auto it{modelWriteConfs.find(b)}; it != std::end(modelWriteConfs)) {
           eckit::LocalConfiguration mconf = it->second;
 
           // Should be on the model geometry!
+          const Variables_ pertVarsT(templatedVarsConf(fset4dDxI[0].variables()));
           auto pert = Increment_(geom,
-                                 fset4dDx[0].variables(),
+                                 pertVarsT,
                                  time);
           pert.zero();
-          pert.fromFieldSet(fset4dDx[0].fieldSet());
+          pert.increment().fromFieldSet(fset4dDx[0].fieldSet());
 
-          IncrementWriteParameters_ writeParams;
-          writeParams.deserialize(mconf);
-          writeParams.setMember(jm+1);
+          eckit::LocalConfiguration writeParams = mconf;
+          util::setMember(writeParams, jm+1);
           pert.write(writeParams);
         }
       }
@@ -399,16 +429,6 @@
     return 0;
   }
 // -----------------------------------------------------------------------------
-  void outputSchema(const std::string & outputPath) const override {
-    ProcessPertsParameters_ params;
-    params.outputSchema(outputPath);
-  }
-// -----------------------------------------------------------------------------
-  void validateConfig(const eckit::Configuration & fullConfig) const override {
-    ProcessPertsParameters_ params;
-    params.validate(fullConfig);
-  }
-// -----------------------------------------------------------------------------
  private:
   std::string appname() const override {
     return "oops::ProcessPerts<" + MODEL::name() + ">";
