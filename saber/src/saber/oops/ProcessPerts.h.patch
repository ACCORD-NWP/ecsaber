--- /home/benjaminm/code/oops-bundle/ecsaber/saber/src/saber/oops/ProcessPerts.h.tmp.bak	2024-03-08 08:00:38.857997065 +0100
+++ /home/benjaminm/code/oops-bundle/ecsaber/saber/src/saber/oops/ProcessPerts.h	2024-03-08 08:24:25.969887746 +0100
@@ -1,5 +1,5 @@
 /*
- * (C) Crown Copyright 2023-2024 Met Office
+ * (C) Crown Copyright 2023 Met Office
  *
  * This software is licensed under the terms of the Apache Licence Version 2.0
  * which can be obtained at http://www.apache.org/licenses/LICENSE-2.0.
@@ -7,6 +7,8 @@
 
 #pragma once
 
+#include <omp.h>
+
 #include <algorithm>
 #include <memory>
 #include <sstream>
@@ -18,12 +20,14 @@
 #include "eckit/exception/Exceptions.h"
 
 #include "oops/base/FieldSets.h"
-#include "oops/base/Geometry.h"
-#include "oops/base/Increment.h"
-#include "oops/base/instantiateCovarFactory.h"
-#include "oops/base/ModelSpaceCovarianceBase.h"
-#include "oops/base/State.h"
-#include "oops/base/Variables.h"
+#include "oops/base/Increment4D.h"
+#include "oops/base/State4D.h"
+#include "oops/interface/Geometry.h"
+#include "oops/interface/Increment.h"
+#include "oops/interface/Model.h"
+#include "oops/interface/State.h"
+#include "oops/interface/Variables.h"
+#include "oops/runs/Application.h"
 #include "oops/mpi/mpi.h"
 #include "oops/runs/Application.h"
 #include "oops/util/ConfigFunctions.h"
@@ -35,6 +39,9 @@
 #include "oops/util/parameters/RequiredParameter.h"
 
 #include "saber/blocks/SaberParametricBlockChain.h"
+#include "saber/oops/instantiateCovarFactory.h"
+
+#include "saber/oops/ECUtilities.h"
 #include "saber/oops/Utilities.h"
 
 namespace saber {
@@ -83,14 +90,12 @@
   OOPS_CONCRETE_PARAMETERS(ModelOrGenericWriteParameters, oops::Parameters)
 
  public:
-  typedef typename oops::Increment<MODEL>::WriteParameters_  IncrementWriteParameters_;
-
   /// Write parameters using generic oops::util::writeFieldSet writer
   oops::OptionalParameter<eckit::LocalConfiguration>
     genericWrite{"generic write", this};
 
   /// Write parameters using model increment writer
-  oops::OptionalParameter<IncrementWriteParameters_>
+  oops::OptionalParameter<eckit::LocalConfiguration>
     modelWrite{"model write", this};
 };
 
@@ -99,25 +104,20 @@
 
 /// \brief Top-level options taken by the ProcessPerts application.
 template <typename MODEL> class ProcessPertsParameters :
-  public oops::ApplicationParameters {
-  OOPS_CONCRETE_PARAMETERS(ProcessPertsParameters, oops::ApplicationParameters)
+  public oops::Parameters {
+  OOPS_CONCRETE_PARAMETERS(ProcessPertsParameters, oops::Parameters)
 
  public:
-  typedef oops::ModelSpaceCovarianceParametersWrapper<MODEL> CovarianceParameters_;
-
-  typedef typename oops::Geometry<MODEL>::Parameters_     GeometryParameters_;
-  typedef ErrorCovarianceParameters<MODEL>                ErrorCovarianceParameters_;
   typedef ModelOrGenericWriteParameters<MODEL>            ModelOrGenericWriteParameters_;
   /// Geometry parameters.
-  oops::RequiredParameter<GeometryParameters_> geometry{"geometry", this};
+  oops::RequiredParameter<eckit::LocalConfiguration> geometry{"resolution", this};
 
   /// Background parameters.
-  oops::RequiredParameter<eckit::LocalConfiguration> background{"background", this};
+  oops::RequiredParameter<eckit::LocalConfiguration> background{"Background", this};
 
-  oops::RequiredParameter<oops::patch::Variables> inputVariables{"input variables", this};
+  oops::RequiredParameter<eckit::LocalConfiguration> inputVariables{"input variables", this};
 
-  oops::RequiredParameter<std::vector<ErrorCovarianceParameters_>>
-   saberFilterCovarianceParams{"saber filter blocks", this};
+  oops::RequiredParameter<eckit::LocalConfiguration> saberFilterCovarianceParams{"saber filter blocks", this};
 
   /// Where to read input ensemble: From states or perturbations
   oops::OptionalParameter<eckit::LocalConfiguration> ensemble{"ensemble", this};
@@ -133,42 +133,69 @@
 
 // -----------------------------------------------------------------------------
 
-template <typename MODEL> class ProcessPerts : public oops::Application {
-  typedef oops::ModelSpaceCovarianceBase<MODEL>             CovarianceBase_;
-  typedef oops::CovarianceFactory<MODEL>                    CovarianceFactory_;
-  typedef oops::ModelSpaceCovarianceParametersBase<MODEL>   CovarianceParametersBase_;
-  typedef oops::Geometry<MODEL>                             Geometry_;
-  typedef oops::Increment<MODEL>                            Increment_;
-  typedef oops::State<MODEL>                                State_;
-  typedef oops::State4D<MODEL>                              State4D_;
-  typedef typename oops::Increment<MODEL>::WriteParameters_ IncrementWriteParameters_;
-  typedef ProcessPertsParameters<MODEL>                     ProcessPertsParameters_;
+template <typename MODEL>
+class ProcessPerts : public oops::Application {
+  using CovarianceBase_ = oops::ModelSpaceCovarianceBase<MODEL>;
+  using CovarianceFactory_ = oops::CovarianceFactory<MODEL>;
+  using Geometry_ = oops::Geometry<MODEL>;
+  using Increment_ = oops::Increment<MODEL>;
+  using Increment4D_ = oops::Increment4D<MODEL>;
+  using Model_ = oops::Model<MODEL>;
+  using State_ = oops::State<MODEL>;
+  using State4D_ = oops::State4D<MODEL>;
+  using Variables_ = oops::Variables<MODEL>;
+  using ProcessPertsParameters_ = ProcessPertsParameters<MODEL>;
 
  public:
 // -----------------------------------------------------------------------------
-  explicit ProcessPerts(const eckit::mpi::Comm & comm = eckit::mpi::comm()) :
-    Application(comm) {
+  ProcessPerts() {
     instantiateCovarFactory<MODEL>();
   }
 // -----------------------------------------------------------------------------
   virtual ~ProcessPerts() {}
 // -----------------------------------------------------------------------------
 
-  int execute(const eckit::Configuration & fullConfig, bool validate) const override {
+  int execute(const eckit::Configuration & fullConfig) const {
     // Deserialize parameters
     ProcessPertsParameters_ params;
-    if (validate) params.validate(fullConfig);
+    params.validate(fullConfig);
     params.deserialize(fullConfig);
 
     // Define space and time communicators
-    const eckit::mpi::Comm * commSpace = &this->getComm();
-    const eckit::mpi::Comm * commTime = &oops::mpi::myself();
+    const eckit::mpi::Comm * commSpace = &eckit::mpi::comm();
+
+    // Get number of MPI tasks and OpenMP threads
+    size_t ntasks = commSpace->size();
+    size_t nthreads = 1;
+#ifdef _OPENMP
+    # pragma omp parallel
+    {
+      nthreads = omp_get_num_threads();
+    }
+#endif
+
+    // Replace patterns in full configuration and deserialize parameters
+    eckit::LocalConfiguration fullConfigUpdated(fullConfig);
+    util::seekAndReplace(fullConfigUpdated, "_MPI_", std::to_string(ntasks));
+    util::seekAndReplace(fullConfigUpdated, "_OMP_", std::to_string(nthreads));
+    params.deserialize(fullConfigUpdated);
+
+    // Set precision for test channel
+    oops::Log::test() << std::scientific
+                      << std::setprecision(std::numeric_limits<double>::digits10+1);
 
     // Setup geometry
-    const Geometry_ geom(params.geometry, *commSpace, *commTime);
+    const Geometry_ geom(params.geometry);
+
+    // Setup model
+    eckit::LocalConfiguration modelConf;
+    if (fullConfigUpdated.has("model")) {
+      modelConf = fullConfigUpdated.getSubConfiguration("model");
+    }
+    const Model_ model(geom, modelConf);
 
     // Setup background
-    const State4D_ xx(geom, params.background, *commTime);
+    const State4D_ xx(params.background, geom, model);
     oops::FieldSet4D fsetXb(xx);
     oops::FieldSet4D fsetFg(xx);
 
@@ -178,9 +205,10 @@
     std::vector<eckit::LocalConfiguration> filterCovarianceBlockConfs
       = fullConfig.getSubConfigurations("saber filter blocks");
 
-    oops::patch::Variables incVars = params.inputVariables;
+    const Variables_ incVarsT(params.inputVariables);
+    oops::patch::Variables incVars(incVarsT.variables().variablesList());
     // Initialize outer variables
-    const std::vector<std::size_t> vlevs = geom.variableSizes(incVars);
+    const std::vector<std::size_t> vlevs = geom.geometry().variableSizes(incVarsT.variables());
     for (std::size_t i = 0; i < vlevs.size() ; ++i) {
       incVars.addMetaData(incVars[i], "levels", vlevs[i]);
     }
@@ -285,19 +313,20 @@
                                 std::vector<std::string>{"geometry", "grid"},
                                 "grid pattern",
                                 conf);
-          util::writeFieldSet(geom.getComm(), conf, fset4dDx[0].fieldSet());
+          util::writeFieldSet(geom.geometry().getComm(), conf, fset4dDx[0].fieldSet());
         }
 
         if (localOutputPert.modelWrite.value() != boost::none) {
           // Should be on the model geometry!
+          const Variables_ pertVarsT(templatedVarsConf(fset4dDx[0].variables()));
           auto pert = Increment_(geom,
-                                 fset4dDx[0].variables(),
+                                 pertVarsT,
                                  time);
           pert.zero();
-          pert.fromFieldSet(fset4dDx[0].fieldSet());
+          pert.increment().fromFieldSet(fset4dDx[0].fieldSet());
 
-          IncrementWriteParameters_ writeParams = localOutputPert.modelWrite.value().value();
-          writeParams.setMember(jm+1);
+          eckit::LocalConfiguration writeParams = *localOutputPert.modelWrite.value();
+          util::setMember(writeParams, jm+1);
           pert.write(writeParams);
         }
 
@@ -321,19 +350,20 @@
                                 std::vector<std::string>{"geometry", "grid"},
                                 "grid pattern",
                                 conf);
-          util::writeFieldSet(geom.getComm(), conf, fset4dDxI[0].fieldSet());
+          util::writeFieldSet(geom.geometry().getComm(), conf, fset4dDxI[0].fieldSet());
         }
 
         if (localOutputPert.modelWrite.value() != boost::none) {
           // Should be on the model geometry!
+          const Variables_ pertVarsT(templatedVarsConf(fset4dDxI[0].variables()));
           auto pert = Increment_(geom,
-                                 fset4dDxI[0].variables(),
+                                 pertVarsT,
                                  time);
           pert.zero();
-          pert.fromFieldSet(fset4dDxI[0].fieldSet());
+          pert.increment().fromFieldSet(fset4dDxI[0].fieldSet());
 
-          auto writeParams = localOutputPert.modelWrite.value().value();
-          writeParams.setMember(jm+1);
+          auto writeParams = *localOutputPert.modelWrite.value();
+          util::setMember(writeParams, jm+1);
           pert.write(writeParams);
         }
 
@@ -346,16 +376,6 @@
     return 0;
   }
 // -----------------------------------------------------------------------------
-  void outputSchema(const std::string & outputPath) const override {
-    ProcessPertsParameters_ params;
-    params.outputSchema(outputPath);
-  }
-// -----------------------------------------------------------------------------
-  void validateConfig(const eckit::Configuration & fullConfig) const override {
-    ProcessPertsParameters_ params;
-    params.validate(fullConfig);
-  }
-// -----------------------------------------------------------------------------
  private:
   std::string appname() const override {
     return "oops::ProcessPerts<" + MODEL::name() + ">";
