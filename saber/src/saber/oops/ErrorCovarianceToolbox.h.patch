--- /home/benjaminm/code/oops-bundle/ecsaber/saber/src/saber/oops/ErrorCovarianceToolbox.h.tmp.bak	2024-07-19 10:07:31.621297661 +0200
+++ /home/benjaminm/code/oops-bundle/ecsaber/saber/src/saber/oops/ErrorCovarianceToolbox.h	2024-07-19 10:04:53.324736225 +0200
@@ -26,19 +26,15 @@
 #include "eckit/exception/Exceptions.h"
 #include "eckit/mpi/Comm.h"
 
-#include "oops/base/Geometry.h"
-#include "oops/base/Increment.h"
 #include "oops/base/Increment4D.h"
-#include "oops/base/IncrementEnsemble.h"
-#include "oops/base/instantiateCovarFactory.h"
-#include "oops/base/ModelSpaceCovarianceBase.h"
-#include "oops/base/PostProcessor.h"
-#include "oops/base/State.h"
 #include "oops/base/State4D.h"
-#include "oops/base/StateWriter.h"
-#include "oops/base/Variables.h"
-#include "oops/mpi/mpi.h"
+#include "oops/interface/Geometry.h"
+#include "oops/interface/Increment.h"
+#include "oops/interface/Model.h"
+#include "oops/interface/State.h"
+#include "oops/interface/Variables.h"
 #include "oops/runs/Application.h"
+#include "oops/util/AtlasArrayUtil.h"
 #include "oops/util/ConfigFunctions.h"
 #include "oops/util/ConfigHelpers.h"
 #include "oops/util/DateTime.h"
@@ -49,6 +45,8 @@
 #include "oops/util/parameters/Parameters.h"
 #include "oops/util/parameters/RequiredParameter.h"
 
+#include "saber/oops/instantiateCovarFactory.h"
+#include "saber/oops/ECUtilities.h"
 #include "saber/oops/Utilities.h"
 #include "saber/util/HorizontalProfiles.h"
 
@@ -57,22 +55,19 @@
 // -----------------------------------------------------------------------------
 
 /// \brief Top-level options taken by the ErrorCovarianceToolbox application.
-template <typename MODEL> class ErrorCovarianceToolboxParameters :
-  public oops::ApplicationParameters {
-  OOPS_CONCRETE_PARAMETERS(ErrorCovarianceToolboxParameters, oops::ApplicationParameters)
+class ErrorCovarianceToolboxParameters :
+  public oops::Parameters {
+  OOPS_CONCRETE_PARAMETERS(ErrorCovarianceToolboxParameters, oops::Parameters)
 
  public:
-  typedef oops::ModelSpaceCovarianceParametersWrapper<MODEL> CovarianceParameters_;
-  typedef typename oops::Geometry<MODEL>::Parameters_        GeometryParameters_;
-
   /// Geometry parameters.
-  oops::RequiredParameter<GeometryParameters_> geometry{"geometry", this};
+  oops::RequiredParameter<eckit::LocalConfiguration> geometry{"resolution", this};
 
   /// Background parameters.
-  oops::RequiredParameter<eckit::LocalConfiguration> background{"background", this};
+  oops::RequiredParameter<eckit::LocalConfiguration> background{"Background", this};
 
   /// Background error covariance model.
-  oops::RequiredParameter<CovarianceParameters_> backgroundError{"background error", this};
+  oops::RequiredParameter<eckit::LocalConfiguration> backgroundError{"Covariance", this};
 
   /// Geometry parameters.
   oops::Parameter<bool> parallel{"parallel subwindows", true, this};
@@ -107,71 +102,34 @@
 // -----------------------------------------------------------------------------
 
 template <typename MODEL> class ErrorCovarianceToolbox : public oops::Application {
-  typedef oops::ModelSpaceCovarianceBase<MODEL>           CovarianceBase_;
-  typedef oops::CovarianceFactory<MODEL>                  CovarianceFactory_;
-  typedef oops::ModelSpaceCovarianceParametersBase<MODEL> CovarianceParametersBase_;
+  typedef oops::ModelSpaceCovariance4DBase<MODEL>         Covariance4DBase_;
+  typedef oops::Covariance4DFactory<MODEL>                Covariance4DFactory_;
   typedef oops::Geometry<MODEL>                           Geometry_;
   typedef oops::Increment<MODEL>                          Increment_;
   typedef oops::Increment4D<MODEL>                        Increment4D_;
+  typedef oops::Model<MODEL>                              Model_;
   typedef oops::State<MODEL>                              State_;
   typedef oops::State4D<MODEL>                            State4D_;
   typedef oops::Localization<MODEL>                       Localization_;
-  typedef ErrorCovarianceToolboxParameters<MODEL>         ErrorCovarianceToolboxParameters_;
+  typedef oops::Variables<MODEL>                          Variables_;
+  typedef ErrorCovarianceToolboxParameters                ErrorCovarianceToolboxParameters_;
 
  public:
 // -----------------------------------------------------------------------------
-  explicit ErrorCovarianceToolbox(const eckit::mpi::Comm & comm = eckit::mpi::comm()) :
-    Application(comm) {
-    oops::instantiateCovarFactory<MODEL>();
+  ErrorCovarianceToolbox() {
+    instantiateCovarFactory<MODEL>();
   }
 // -----------------------------------------------------------------------------
   virtual ~ErrorCovarianceToolbox() {}
 // -----------------------------------------------------------------------------
-  int execute(const eckit::Configuration & fullConfig, bool validate) const override {
+  int execute(const eckit::Configuration & fullConfig) const {
     // Deserialize parameters
-    ErrorCovarianceToolboxParameters_ params;
-    if (validate) params.validate(fullConfig);
+    ErrorCovarianceToolboxParameters params;
+    params.validate(fullConfig);
     params.deserialize(fullConfig);
 
-    // Define number of subwindows
-    const eckit::LocalConfiguration backgroundConfig(fullConfig, "background");
-    size_t nsubwin = 1;
-    if (backgroundConfig.has("states")) {
-      std::vector<eckit::LocalConfiguration> confs;
-      backgroundConfig.get("states", confs);
-      nsubwin = confs.size();
-    }
-
     // Define space and time communicators
-    const eckit::mpi::Comm * commSpace = &this->getComm();
-    const eckit::mpi::Comm * commTime = &oops::mpi::myself();
-    if (nsubwin > 1) {
-      // Define sub-windows
-      const size_t ntasks = this->getComm().size();
-      size_t mysubwin = 0;
-      size_t nsublocal = nsubwin;
-      if (params.parallel && (ntasks % nsubwin == 0)) {
-        nsublocal = 1;
-        mysubwin = this->getComm().rank() / (ntasks / nsubwin);
-        ASSERT(mysubwin < nsubwin);
-      } else if (params.parallel) {
-        oops::Log::warning() << "Parallel time subwindows specified in yaml "
-                             << "but number of tasks is not divisible by "
-                             << "the number of subwindows, ignoring." << std::endl;
-      }
-
-      // Create a communicator for same sub-window, to be used for communications in space
-      const std::string sgeom = "comm_geom_" + std::to_string(mysubwin);
-      char const *geomName = sgeom.c_str();
-      commSpace = &this->getComm().split(mysubwin, geomName);
-
-      // Create a communicator for same local area, to be used for communications in time
-      const size_t myarea = commSpace->rank();
-      const std::string stime = "comm_time_" + std::to_string(myarea);
-      char const *timeName = stime.c_str();
-      commTime = &this->getComm().split(myarea, timeName);
-      ASSERT(commTime->size() == (nsubwin / nsublocal));
-    }
+    const eckit::mpi::Comm * commSpace = &eckit::mpi::comm();
 
     // Get number of MPI tasks and OpenMP threads
     size_t ntasks = commSpace->size();
@@ -189,32 +147,43 @@
     util::seekAndReplace(fullConfigUpdated, "_OMP_", std::to_string(nthreads));
     params.deserialize(fullConfigUpdated);
 
+    // Set precision for test channel
+    oops::Log::test() << std::scientific
+                      << std::setprecision(std::numeric_limits<double>::digits10+1);
+
     // Setup geometry
-    const Geometry_ geom(params.geometry, *commSpace, *commTime);
+    const Geometry_ geom(params.geometry);
+
+    // Setup model
+    eckit::LocalConfiguration modelConf;
+    if (fullConfigUpdated.has("model")) {
+      modelConf = fullConfigUpdated.getSubConfiguration("model");
+    }
+    const Model_ model(geom, modelConf);
 
-    // Setup background
-    const State4D_ xx(geom, params.background.value(), *commTime);
+    // Setup background state
+    const State4D_ xx(params.background, geom, model);
 
     // Setup variables
-    oops::JediVariables tmpVars = xx.variables();
+    oops::JediVariables tmpVars(xx[0].state().fieldSet().field_names());
     if (params.incrementVars.value() != boost::none) {
       tmpVars = params.incrementVars.value().value();
     }
-    const oops::JediVariables vars = tmpVars;
+    const Variables_ varsT(templatedVarsConf(tmpVars));
 
     // Setup time
     util::DateTime time = xx[0].validTime();
 
     // Background error covariance parameters
-    const CovarianceParametersBase_ & covarParams
-      = params.backgroundError.value().covarianceParameters;
+    const eckit::LocalConfiguration & covarParams
+      = params.backgroundError.value();
 
     // Dirac test
     const auto & diracParams = params.dirac.value();
     if (diracParams != boost::none) {
       // Setup Dirac field
-      Increment4D_ dxi(geom, vars, xx.times(), *commTime);
-      dxi.dirac(*diracParams);
+      Increment4D_ dxi(geom, varsT, xx.times());
+      dirac4D(*diracParams, dxi);
       oops::Log::test() << "Input Dirac increment:" << dxi << std::endl;
 
       // Test configuration
@@ -230,7 +199,8 @@
       }
 
       // Add output Dirac configuration
-      eckit::LocalConfiguration outputDiracUpdated = params.outputDirac.value().value();
+      const auto & outputDirac = params.outputDirac.value();
+      auto outputDiracUpdated(*outputDirac);
       setMPI(outputDiracUpdated, ntasks);
       testConf.set("output dirac", outputDiracUpdated);
 
@@ -242,32 +212,36 @@
 
       // Apply B matrix components recursively
       std::string id;
-      dirac(covarParams.toConfiguration(), testConf, id, geom, vars, xx, dxi);
+      dirac(covarParams, testConf, id, geom, varsT, xx, dxi);
     }
 
-    const auto & randomizationSize = covarParams.randomizationSize.value();
-    if ((diracParams == boost::none) || (randomizationSize != boost::none)) {
+    const auto & randomizationSize = covarParams.getInt("randomization size", 0);
+    if ((diracParams == boost::none) || (randomizationSize > 0)) {
       // Background error covariance training
-      std::unique_ptr<CovarianceBase_> Bmat(CovarianceFactory_::create(
-                                            geom, vars, covarParams, xx, xx));
+      std::unique_ptr<Covariance4DBase_> Bmat(Covariance4DFactory_::create(
+                                              covarParams, geom, varsT, xx));
+
+      // Linearize
+      eckit::LocalConfiguration linConf;
+      const std::string covarianceModel(covarParams.getString("covariance"));
+      if (covarianceModel == "hybrid") {
+        eckit::LocalConfiguration jbConf;
+        jbConf.set("Covariance", covarParams);
+        linConf.set("Jb", jbConf);
+      } else if (covarianceModel == "ensemble") {
+        linConf.set("ensemble_covariance", covarParams);
+      } else {
+        linConf = covarParams;
+      }
+      Bmat->linearize(xx, geom, linConf);
 
       // Randomization
-      randomization(params, geom, vars, xx, Bmat, ntasks);
+      randomization(params, geom, varsT, xx, Bmat, ntasks);
     }
 
     return 0;
   }
 // -----------------------------------------------------------------------------
-  void outputSchema(const std::string & outputPath) const override {
-    ErrorCovarianceToolboxParameters_ params;
-    params.outputSchema(outputPath);
-  }
-// -----------------------------------------------------------------------------
-  void validateConfig(const eckit::Configuration & fullConfig) const override {
-    ErrorCovarianceToolboxParameters_ params;
-    params.validate(fullConfig);
-  }
-// -----------------------------------------------------------------------------
  private:
   std::string appname() const override {
     return "oops::ErrorCovarianceToolbox<" + MODEL::name() + ">";
@@ -281,15 +255,15 @@
 
     // Create diagnostic field
     Increment4D_ diagPoints(data);
-    diagPoints.dirac(diagConf);
+    dirac4D(diagConf, diagPoints);
 
     // Get diagnostic values
-    for (size_t jj = 0; jj < data.size(); ++jj) {
-      util::printDiagValues(diagPoints.commTime(),
-                            geom.getComm(),
-                            geom.functionSpace(),
-                            data[jj].fieldSet().fieldSet(),
-                            diagPoints[jj].fieldSet().fieldSet());
+    for (int jj = data.first(); jj <= data.last(); ++jj) {
+      util::printDiagValues(oops::mpi::myself(),
+                            geom.geometry().getComm(),
+                            geom.geometry().functionSpace(),
+                            data[jj].increment().fieldSet(),
+                            diagPoints[jj].increment().fieldSet());
     }
 
     oops::Log::trace() << appname() << "::print_value_at_position done" << std::endl;
@@ -302,13 +276,13 @@
                               const Increment4D_ & data) const {
   oops::Log::trace() << appname() << "::extract_1d_covariances starting" << std::endl;
 
-  if (data.size() > 1) {
+  if (data.last()-data.first()+1 > 1) {
     throw eckit::NotImplemented("Not implemented for 4D covariances", Here());
   }
 
   // Create dirac field
   Increment4D_ diracPoints(data);
-  diracPoints.dirac(diracConf);
+  dirac4D(diracConf, diracPoints);
 
   // Define maximum length of horizontal profile
   double maxLength = std::numeric_limits<double>::infinity();
@@ -317,7 +291,7 @@
     maxLength = profileConf.getDouble("maximum distance");
   } else {
     // If no maximum length input is given, try to compute a default value from the grid
-    const auto & fspace = geom.functionSpace();
+    const auto & fspace = geom.geometry().functionSpace();
     if (fspace.type() == "StructuredColumns") {
       const atlas::functionspace::StructuredColumns fs(fspace);
       if (fs.grid().name().compare(0, 1, "F") == 0) {
@@ -344,19 +318,19 @@
 
   // Get values as a function of separation distance
   auto[distances, covariances, lons, lats, levs, fieldIndexes] =
-      util::sortBySeparationDistance(geom.getComm(),
-                                     geom.functionSpace(),
-                                     data[0].fieldSet().fieldSet(),
-                                     diracPoints[0].fieldSet().fieldSet(),
+      util::sortBySeparationDistance(geom.geometry().getComm(),
+                                     geom.geometry().functionSpace(),
+                                     data[0].increment().fieldSet(),
+                                     diracPoints[0].increment().fieldSet(),
                                      maxLength,
                                      removeDuplicates);
 
   // Write to file or to test Log
-  const auto & names = data[0].fieldSet().fieldSet().field_names();
+  const auto & names = data[0].increment().fieldSet().field_names();
   if (profileConf.has("output filepath")) {
     // Write to file
     const auto outputPath = profileConf.getString("output filepath");
-    util::write_1d_covariances(geom.getComm(),
+    util::write_1d_covariances(geom.geometry().getComm(),
                                distances,
                                covariances,
                                lons,
@@ -386,15 +360,29 @@
              const eckit::LocalConfiguration & testConf,
              std::string & id,
              const Geometry_ & geom,
-             const oops::JediVariables & vars,
+             const Variables_ & vars,
              const State4D_ & xx,
              const Increment4D_ & dxi) const {
     // Define output increment
     Increment4D_ dxo(dxi, false);
 
     // Covariance
-    std::unique_ptr<CovarianceBase_> Bmat(CovarianceFactory_::create(
-                                          geom, vars, covarConf, xx, xx));
+    std::unique_ptr<Covariance4DBase_> Bmat(Covariance4DFactory_::create(
+                                            covarConf, geom, vars, xx));
+
+    // Linearize
+    eckit::LocalConfiguration linConf;
+    const std::string covarianceModel = covarConf.getString("covariance");
+    if (covarianceModel == "hybrid") {
+      eckit::LocalConfiguration jbConf;
+      jbConf.set("Covariance", covarConf);
+      linConf.set("Jb", jbConf);
+    } else if (covarianceModel == "ensemble") {
+      linConf.set("ensemble_covariance", covarConf);
+    } else {
+      linConf = covarConf;
+    }
+    Bmat->linearize(xx, geom, linConf);
 
     // Multiply
     Bmat->multiply(dxi, dxo);
@@ -440,17 +428,13 @@
     oops::Log::test() << "Covariance(" << id << ") * Increment:" << dxo << std::endl;
 
     // Look for hybrid or ensemble covariance models
-    const std::string covarianceModel(covarConf.getString("covariance model"));
     if (covarianceModel == "hybrid") {
-      std::vector<eckit::LocalConfiguration> confs;
-      covarConf.get("components", confs);
-      size_t componentIndex(1);
-      for (const auto & conf : confs) {
-        std::string idC(id + std::to_string(componentIndex));
-        const eckit::LocalConfiguration componentConfig(conf, "covariance");
-        dirac(componentConfig, testConf, idC, geom, vars, xx, dxi);
-        ++componentIndex;
-      }
+      eckit::LocalConfiguration staticConfig(covarConf, "static_covariance");
+      std::string staticID = "hybrid1";
+      dirac(staticConfig, testConf, staticID, geom, vars, xx, dxi);
+      eckit::LocalConfiguration ensembleConfig(covarConf, "ensemble_covariance");
+      std::string ensembleID = "hybrid2";
+      dirac(ensembleConfig, testConf, ensembleID, geom, vars, xx, dxi);
     }
     if (covarianceModel == "SABER") {
       const std::string saberCentralBlockName =
@@ -464,7 +448,7 @@
           for (const auto & conf : confs) {
             std::string idC(id + std::to_string(componentIndex));
             eckit::LocalConfiguration componentConfig(conf, "covariance");
-            componentConfig.set("covariance model", "SABER");
+            componentConfig.set("covariance", "SABER");
             if (covarConf.has("adjoint test")) {
               componentConfig.set("adjoint test", covarConf.getBool("adjoint test"));
             }
@@ -492,7 +476,15 @@
       Localization_ Lmat(geom, vars, locConfig);
 
       // Apply localization
-      Lmat.multiply(dxo);
+      Increment_ dxTmp(dxo[0]);
+      for (size_t jsub = 1; jsub < dxo.times().size(); ++jsub) {
+        dxTmp.axpy(1.0, dxo[jsub], false);
+      }
+      Lmat.multiply(dxTmp);
+      for (size_t jsub = 0; jsub < dxo.times().size(); ++jsub) {
+        dxo[jsub].zero();
+        dxo[jsub].axpy(1.0, dxTmp, false);
+      }
 
       // Update ID
       std::string idL(id);
@@ -520,11 +512,11 @@
     }
   }
 // -----------------------------------------------------------------------------
-  void randomization(const ErrorCovarianceToolboxParameters_ & params,
+  void randomization(const ErrorCovarianceToolboxParameters & params,
                      const Geometry_ & geom,
-                     const oops::JediVariables & vars,
+                     const Variables_ & vars,
                      const State4D_ & xx,
-                     const std::unique_ptr<CovarianceBase_> & Bmat,
+                     const std::unique_ptr<Covariance4DBase_> & Bmat,
                      const size_t & ntasks) const {
     if (Bmat->randomizationSize() > 0) {
       oops::Log::info() << "Info     : " << std::endl;
@@ -532,9 +524,9 @@
       oops::Log::info() << "Info     : -----------------------" << std::endl;
 
       // Create increments
-      Increment4D_ dx(geom, vars, xx.times(), xx.commTime());
-      Increment4D_ dxsq(geom, vars, xx.times(), xx.commTime());
-      Increment4D_ variance(geom, vars, xx.times(), xx.commTime());
+      Increment4D_ dx(geom, vars, xx.times());
+      Increment4D_ dxsq(geom, vars, xx.times());
+      Increment4D_ variance(geom, vars, xx.times());
 
       // Initialize variance
       variance.zero();
@@ -559,7 +551,9 @@
 
         // Square perturbation
         dxsq = dx;
-        dxsq.schur_product_with(dx);
+        for (int jsub = dxsq.first(); jsub <= dxsq.last(); ++jsub) {
+          dxsq[jsub].schur_product_with(dx[jsub]);
+        }
 
         // Update variance
         variance += dxsq;
@@ -575,8 +569,8 @@
 
           if (outputPerturbations != boost::none) {
             // Update config
-            auto outputPerturbationsUpdated = *outputPerturbations;
-            util::setMember(outputPerturbationsUpdated, jm+1);
+            auto outputPerturbationsUpdated(*outputPerturbations);
+            setMember(outputPerturbationsUpdated, jm+1);
             setMPI(outputPerturbationsUpdated, ntasks);
 
             // Write perturbation
@@ -585,8 +579,8 @@
 
           if (outputStates != boost::none) {
             // Update config
-            auto outputStatesUpdated = *outputStates;
-            util::setMember(outputStatesUpdated, jm+1);
+            auto outputStatesUpdated(*outputStates);
+            setMember(outputStatesUpdated, jm+1);
             setMPI(outputStatesUpdated, ntasks);
 
             // Add background state to perturbation
