--- /home/benjaminm/code/oops-bundle/ecsaber/saber/src/saber/bump/tools_atlas.fypp.tmp	2024-06-12 18:33:06.746318614 +0200
+++ /home/benjaminm/code/oops-bundle/ecsaber/saber/src/saber/bump/tools_atlas.fypp	2024-06-03 11:32:04.844780437 +0200
@@ -10,7 +10,8 @@
 module tools_atlas
 
 use atlas_module, only: atlas_structuredgrid,atlas_regionalgrid,atlas_field,atlas_integer,atlas_real,atlas_functionspace, &
- & atlas_functionspace_nodecolumns,atlas_functionspace_pointcloud,atlas_functionspace_structuredcolumns
+ & atlas_functionspace_nodecolumns,atlas_functionspace_pointcloud,atlas_functionspace_structuredcolumns, &
+ & atlas_projection,atlas_config
 use tools_const, only: zero,quarter,half,rad2deg
 use tools_kinds, only: kind_int,kind_real
 use tools_func, only: sphere_dist,convert_i2l,convert_l2i
@@ -94,26 +95,31 @@
 ! Subroutine: atlas_get_regional_grid
 !> Define regional ATLAS grid from minimum number of points
 !----------------------------------------------------------------------
-subroutine atlas_get_regional_grid(mpl,nmin,lon_min,lon_max,lat_min,lat_max,agrid,n)
+subroutine atlas_get_regional_grid(mpl,nmin,aproj,lon_center,lat_center,xmin,xmax,ymin,ymax,agrid,n)
 
 implicit none
 
 ! Passed variables
 type(mpl_type),intent(inout) :: mpl               !< MPI data
 integer,intent(in) :: nmin                        !< Minimum number of points
-real(kind_real),intent(in) :: lon_min             !< Minimum longitude
-real(kind_real),intent(in) :: lon_max             !< Maximum longitude
-real(kind_real),intent(in) :: lat_min             !< Minimum latitude
-real(kind_real),intent(in) :: lat_max             !< Maximum latitude
+type(atlas_projection),intent(in) :: aproj        !< ATLAS projection
+real(kind_real),intent(in) :: lon_center          !< Center longitude [radians]
+real(kind_real),intent(in) :: lat_center          !< Center latgitude [radians]
+real(kind_real),intent(in) :: xmin                !< Computational grid minimum x value
+real(kind_real),intent(in) :: xmax                !< Computational grid maximum x value
+real(kind_real),intent(in) :: ymin                !< Computational grid minimum y value
+real(kind_real),intent(in) :: ymax                !< Computational grid maximum y value
 type(atlas_structuredgrid),intent(inout) :: agrid !< ATLAS grid
 integer,intent(out),optional :: n                 !< Grid size
 
 ! Local variables
 integer :: nx,ny
-real(kind_real) :: lat_mid,dx,dy,alpha
+real(kind_real) :: alpha,dx,dy
+character(len=:),allocatable :: proj_type
+type(atlas_config) :: aconfig_proj,aconfig_grid
 
 ! Set name
-@:set_name(atlas_get_global_grid)
+@:set_name(atlas_get_regional_grid)
 
 ! Probe in
 @:probe_in()
@@ -121,16 +127,39 @@
 ! Check number of points
 if (nmin<3) call mpl%abort('${subr}$','minimum number of points is too small')
 
-! Shape ratio
-lat_mid = half*(lat_min+lat_max)
-call sphere_dist(lon_min,lat_mid,lon_max,lat_mid,dx)
-call sphere_dist(zero,lat_min,zero,lat_max,dy)
-alpha = dy/dx
+! Grid size
+alpha = (ymax-ymin)/(xmax-xmin)
 nx = ceiling(sqrt(real(nmin,kind_real)/alpha))
 ny = ceiling(alpha*real(nx,kind_real))
+if (nx<2) call mpl%abort('${subr}$','nx is too small')
+if (ny<2) call mpl%abort('${subr}$','ny is too small')
+
+! Get projection type
+aconfig_proj = atlas_config()
+aconfig_proj = aproj%spec()
+if (.not.aconfig_proj%get("type",proj_type)) call mpl%abort('${subr}$','missing projection type')
 
-! Regional grid
-agrid = atlas_regionalgrid(nx,ny,lat_max*rad2deg,lon_min*rad2deg,lat_min*rad2deg,lon_max*rad2deg)
+! Define grid
+aconfig_grid = atlas_config()
+call aconfig_grid%set('type','regional')
+call aconfig_grid%set('nx',nx)
+call aconfig_grid%set('ny',ny)
+call aconfig_grid%set('projection',aproj%spec())
+if (proj_type=="lambert_conformal_conic") then
+   dx = (xmax-xmin)/real(nx-1,kind_real)
+   dy = (ymax-ymin)/real(ny-1,kind_real)
+   call aconfig_grid%set('dx',dx)
+   call aconfig_grid%set('dy',dy)
+   call aconfig_grid%set('lonlat(centre)',(/lon_center*rad2deg,lat_center*rad2deg/))
+else if ((proj_type=="lonlat").or.(proj_type=="rotated_lonlat")) then
+   call aconfig_grid%set('north',ymax)
+   call aconfig_grid%set('south',ymin)
+   call aconfig_grid%set('east',xmax)
+   call aconfig_grid%set('west',xmin)
+else
+   call mpl%abort('${subr}$','wrong projection type: '//trim(proj_type))
+end if
+agrid = atlas_structuredgrid(aconfig_grid)
 
 ! Define number of points
 if (present(n)) n = nx*ny
