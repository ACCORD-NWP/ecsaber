--- /home/benjaminm/code/oops-bundle/ecsaber/saber/src/saber/bump/PsiChiToUV.cc.tmp.bak	2024-04-04 15:19:53.513076533 +0200
+++ /home/benjaminm/code/oops-bundle/ecsaber/saber/src/saber/bump/PsiChiToUV.cc	2024-04-04 14:55:47.903393517 +0200
@@ -34,9 +34,33 @@
   const int modelLevels(outerVars.getLevels("eastward_wind"));
   innerVars.addMetaData("stream_function", "levels", modelLevels);
   innerVars.addMetaData("velocity_potential", "levels", modelLevels);
+  if (outerVars.hasMetaData("eastward_wind", "vert_coord")) {
+    const std::string vert_coordName = outerVars.getMetaData<std::string>("eastward_wind",
+      "vert_coord");
+    innerVars.addMetaData("stream_function", "vert_coord", vert_coordName);
+    innerVars.addMetaData("velocity_potential", "vert_coord", vert_coordName);
+  }
+  if (outerVars.hasMetaData("eastward_wind", "gmask")) {
+    const std::string gmaskName = outerVars.getMetaData<std::string>("eastward_wind", "gmask");
+    innerVars.addMetaData("stream_function", "gmask", gmaskName);
+    innerVars.addMetaData("velocity_potential", "gmask", gmaskName);
+  }
   return innerVars;
 }
 
+// -----------------------------------------------------------------------------
+
+oops::patch::Variables createActiveVars(const oops::patch::Variables & innerVars,
+                                 const oops::patch::Variables & outerVars) {
+  oops::patch::Variables activeVars;
+  activeVars += innerVars;
+  activeVars += outerVars;
+  const std::vector<std::string> activeStrings{"stream_function", "velocity_potential",
+                                               "eastward_wind", "northward_wind"};
+  activeVars.intersection(oops::patch::Variables(activeStrings));
+  return activeVars;
+}
+
 }  // namespace
 
 // -----------------------------------------------------------------------------
@@ -51,33 +75,12 @@
     innerGeometryData_(outerGeometryData),
     innerVars_(createInnerVars(outerVars)),
     outerVars_(outerVars),
-    bumpParams_(),
-    bump_() {
+    activeVars_(createActiveVars(innerVars_, outerVars_)),
+    bumpParams_(params.calibrationParams.value() != boost::none ? *params.calibrationParams.value()
+      : *params.readParams.value()),
+    bump_(new BUMP(outerGeometryData, activeVars_, covarConf, bumpParams_,
+      params.fieldsMetaData.value(), xb)) {
   oops::Log::trace() << classname() << "::PsiChiToUV starting" << std::endl;
-
-  // Get BUMP parameters
-  if (params.doCalibration()) {
-    bumpParams_ = *params.calibrationParams.value();
-  } else if (params.doRead()) {
-    bumpParams_ = *params.readParams.value();
-  } else {
-    throw eckit::UserError("calibration or read required in BUMP", Here());
-  }
-
-  oops::patch::Variables activeVars;
-  activeVars += innerVars_;
-  activeVars += outerVars_;
-  const std::vector<std::string> activeStrings{"stream_function", "velocity_potential",
-                                               "eastward_wind", "northward_wind"};
-  activeVars.intersection(oops::patch::Variables(activeStrings));
-
-  // Initialize BUMP
-  bump_.reset(new BUMP(outerGeometryData,
-                       activeVars,
-                       covarConf,
-                       bumpParams_,
-                       xb));
-
   oops::Log::trace() << classname() << "::PsiChiToUV done" << std::endl;
 }
 
@@ -94,6 +97,16 @@
 void PsiChiToUV::multiply(oops::FieldSet3D & fset) const {
   oops::Log::trace() << classname() << "::multiply starting" << std::endl;
   bump_->multiplyPsiChiToUV(fset);
+  if (fset[innerVars_[0]].metadata().has("vert_coord")) {
+    const std::string vert_coordName = fset[innerVars_[0]].metadata().getString("vert_coord");
+    fset[outerVars_[0]].metadata().set("vert_coord", vert_coordName);
+    fset[outerVars_[1]].metadata().set("vert_coord", vert_coordName);
+  }
+  if (fset[innerVars_[0]].metadata().has("gmask")) {
+    const std::string gmaskName = fset[innerVars_[0]].metadata().getString("gmask");
+    fset[outerVars_[0]].metadata().set("gmask", gmaskName);
+    fset[outerVars_[1]].metadata().set("gmask", gmaskName);
+  }
   fset.removeFields(innerVars_);
   oops::Log::trace() << classname() << "::multiply done" << std::endl;
 }
@@ -103,6 +116,16 @@
 void PsiChiToUV::multiplyAD(oops::FieldSet3D & fset) const {
   oops::Log::trace() << classname() << "::multiplyAD starting" << std::endl;
   bump_->multiplyPsiChiToUVAd(fset);
+  if (fset[outerVars_[0]].metadata().has("vert_coord")) {
+    const std::string vert_coordName = fset[outerVars_[0]].metadata().getString("vert_coord");
+    fset[outerVars_[0]].metadata().set("vert_coord", vert_coordName);
+    fset[outerVars_[1]].metadata().set("vert_coord", vert_coordName);
+  }
+  if (fset[outerVars_[0]].metadata().has("gmask")) {
+    const std::string gmaskName = fset[outerVars_[0]].metadata().getString("gmask");
+    fset[innerVars_[0]].metadata().set("gmask", gmaskName);
+    fset[innerVars_[1]].metadata().set("gmask", gmaskName);
+  }
   fset.removeFields(outerVars_);
   oops::Log::trace() << classname() << "::multiplyAD done" << std::endl;
 }
