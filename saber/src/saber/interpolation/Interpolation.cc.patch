--- /home/benjaminm/code/oops-bundle/ecsaber/saber/src/saber/interpolation/Interpolation.cc.tmp	2024-06-12 18:33:04.562311188 +0200
+++ /home/benjaminm/code/oops-bundle/ecsaber/saber/src/saber/interpolation/Interpolation.cc	2024-06-12 17:37:29.571611656 +0200
@@ -36,9 +36,21 @@
   innerGeomData_.reset(new oops::GeometryData(geom.functionSpace(), geom.fields(),
                                               true, outerGeometryData.comm()));
 
-  interp_.reset(new oops::GlobalInterpolator(
-          params.forwardInterpConf.value(), *innerGeomData_,
-          outerGeometryData.functionSpace(), outerGeometryData.comm()));
+  // Check domain type
+  regionalGrid_ = false;
+  if (innerGeomData_->functionSpace()->type() == "StructuredColumns") {
+    const atlas::functionspace::StructuredColumns srcFs(innerGeomData_->functionSpace());
+    regionalGrid_ = !srcFs.grid().domain().global();
+  }
+
+  if (regionalGrid_) {
+    regInterp_.reset(new RegionalInterpolation(innerGeomData_->functionSpace(),
+      outerGeomData_.functionSpace()));
+  } else {
+    interp_.reset(new oops::GlobalInterpolator(
+            params.forwardInterpConf.value(), *innerGeomData_,
+            outerGeometryData.functionSpace(), outerGeometryData.comm()));
+  }
 
   oops::Log::trace() << classname() << "::Interpolation done" << std::endl;
 }
@@ -66,7 +78,11 @@
   }
 
   // Interpolate to target/outer grid
-  interp_->apply(sourceFieldSet, targetFieldSet);
+  if (regionalGrid_) {
+    regInterp_->execute(sourceFieldSet, targetFieldSet);
+  } else {
+    interp_->apply(sourceFieldSet, targetFieldSet);
+  }
 
   // Add passive variables
   for (const auto & f : fieldSet) {
@@ -107,7 +123,11 @@
   util::zeroFieldSet(sourceFieldSet);
 
   // (Adjoint of:) Interpolate to target/outer grid
-  interp_->applyAD(sourceFieldSet, targetFieldSet);
+  if (regionalGrid_) {
+    regInterp_->executeAdjoint(sourceFieldSet, targetFieldSet);
+  } else {
+    interp_->applyAD(sourceFieldSet, targetFieldSet);
+  }
 
   // Copy passive variables
   for (const auto & f : fieldSet) {
@@ -124,10 +144,17 @@
 // -----------------------------------------------------------------------------
 
 void Interpolation::leftInverseMultiply(oops::FieldSet3D & fieldSet) const {
-  if (!inverseInterp_) {
-    inverseInterp_.reset(new oops::GlobalInterpolator(
-          params_.inverseInterpConf.value(), outerGeomData_,
-          innerGeomData_->functionSpace(), innerGeomData_->comm()));
+  if (regionalGrid_) {
+    if (!regInverseInterp_) {
+      regInverseInterp_.reset(new RegionalInterpolation(outerGeomData_.functionSpace(),
+        innerGeomData_->functionSpace()));
+    }
+  } else {
+    if (!inverseInterp_) {
+      inverseInterp_.reset(new oops::GlobalInterpolator(
+            params_.inverseInterpConf.value(), outerGeomData_,
+            innerGeomData_->functionSpace(), innerGeomData_->comm()));
+    }
   }
 
   // Temporary FieldSet of active variables for interpolation target
@@ -148,7 +175,11 @@
   }
 
   // Interpolate to target/inner grid
-  inverseInterp_->apply(sourceFieldSet, targetFieldSet);
+  if (regionalGrid_) {
+    regInverseInterp_->execute(sourceFieldSet, targetFieldSet);
+  } else {
+    inverseInterp_->apply(sourceFieldSet, targetFieldSet);
+  }
 
   // Add passive variables
   for (const auto & f : fieldSet) {
