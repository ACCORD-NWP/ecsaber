--- /home/benjaminm/code/oops-bundle/ecsaber/saber/src/saber/interpolation/AtlasInterpWrapper.h.tmp	2024-06-12 18:33:04.546311133 +0200
+++ /home/benjaminm/code/oops-bundle/ecsaber/saber/src/saber/interpolation/AtlasInterpWrapper.h	2024-05-27 15:34:08.718595226 +0200
@@ -1,5 +1,6 @@
 /*
  * (C) Crown Copyright 2021-2022, Met Office
+ * (C) Copyright 2024 Meteorologisk Institutt
  *
  * This software is licensed under the terms of the Apache Licence Version 2.0
  * which can be obtained at http://www.apache.org/licenses/LICENSE-2.0.
@@ -15,25 +16,19 @@
 #include <vector>
 
 #include "atlas/functionspace.h"
-#include "atlas/grid/detail/partitioner/MatchingMeshPartitioner.h"
-#include "atlas/grid/Distribution.h"
-#include "atlas/grid/Grid.h"
-#include "atlas/grid/Partitioner.h"
 #include "atlas/interpolation.h"
-#include "atlas/mesh.h"
-#include "atlas/meshgenerator.h"
 #include "atlas/redistribution/Redistribution.h"
-#include "atlas/util/Point.h"
-#include "atlas/util/PolygonLocator.h"
-#include "atlas/util/PolygonXY.h"
 
 #include "oops/util/Logger.h"
 #include "oops/util/ObjectCounter.h"
 
-
 namespace atlas {
-class Field;
-class FieldSet;
+  class Field;
+  class FieldSet;
+  class Grid;
+  namespace grid {
+    class Partitioner;
+  }
 }
 
 namespace saber {
@@ -43,7 +38,8 @@
 
 class AtlasInterpWrapper {
  public:
-  static const std::string classname() {return "saber::interpolation::AtlasInterpWrapper";}
+  static const std::string classname()
+    {return "quench::interpolation::AtlasInterpWrapper";}
 
   AtlasInterpWrapper(const atlas::grid::Partitioner &,
                      const atlas::FunctionSpace &,
@@ -51,18 +47,18 @@
                      const atlas::FunctionSpace &);
   ~AtlasInterpWrapper() {}
 
-  void execute(const atlas::Field &, atlas::Field &) const;
-
-  void executeAdjoint(atlas::Field &, const atlas::Field &) const;
-
-  void execute(const atlas::FieldSet &, atlas::FieldSet &) const;
-
-  void executeAdjoint(atlas::FieldSet &, const atlas::FieldSet &) const;
+  void execute(const atlas::FieldSet &,
+               atlas::FieldSet &) const;
+  void executeAdjoint(atlas::FieldSet &,
+                      const atlas::FieldSet &) const;
 
  private:
-  atlas::FunctionSpace localDstFunctionSpace_;
-  std::vector<size_t> localTask_;
-  atlas::FunctionSpace targetFunctionSpace_;
+  void execute(const atlas::Field &,
+               atlas::Field &) const;
+  void executeAdjoint(atlas::Field &,
+                      const atlas::Field &) const;
+
+  atlas::FunctionSpace targetFspace_;
   atlas::Interpolation interp_;
   atlas::Redistribution redistr_;
   atlas::Redistribution inverseRedistr_;
@@ -70,5 +66,3 @@
 
 }  // namespace interpolation
 }  // namespace saber
-
-
