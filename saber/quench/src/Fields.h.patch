--- /home/benjaminm/code/oops-bundle/ecsaber/saber/quench/src/Fields.h.tmp	2024-07-04 13:56:20.700087023 +0200
+++ /home/benjaminm/code/oops-bundle/ecsaber/saber/quench/src/Fields.h	2024-07-04 11:12:45.491034031 +0200
@@ -21,25 +21,35 @@
 #include "oops/util/Printable.h"
 #include "oops/util/Serializable.h"
 
+#include "src/FieldsECInc.h"
+#include "src/Interpolation.h"
+
 namespace quench {
   class Geometry;
 
 // -----------------------------------------------------------------------------
-/// Class to represent a Fields for the  model
+/// Fields class
+
 class Fields : public util::Printable,
                public util::Serializable,
                private util::ObjectCounter<Fields> {
  public:
-  static const std::string classname() {return "quench::Fields";}
+  static const std::string classname()
+    {return "quench::Fields";}
 
-// Constructors
-  Fields(const Geometry &, const Variables &, const util::DateTime &);
-  Fields(const Fields &, const Geometry &);
-  Fields(const Fields &, const bool);
+  // Constructors/destructor
+  Fields(const Geometry &,
+         const Variables &,
+         const util::DateTime &);
+  Fields(const Fields &,
+         const Geometry &);
+  Fields(const Fields &,
+         const bool);
   Fields(const Fields &);
-  ~Fields() {}
+  ~Fields()
+    {}
 
-// Basic operators
+  // Basic operators
   void zero();
   void constantValue(const double &);
   void constantValue(const eckit::Configuration &);
@@ -47,41 +57,70 @@
   Fields & operator+=(const Fields &);
   Fields & operator-=(const Fields &);
   Fields & operator*=(const double &);
-  void axpy(const double &, const Fields &);
+  void axpy(const double &,
+            const Fields &);
   double dot_product_with(const Fields &) const;
   void schur_product_with(const Fields &);
   void dirac(const eckit::Configuration &);
   void random();
-  void diff(const Fields &, const Fields &);
+  void diff(const Fields &,
+            const Fields &);
 
-// ATLAS FieldSet
+  // ATLAS FieldSet
   void toFieldSet(atlas::FieldSet &) const;
   void fromFieldSet(const atlas::FieldSet &);
-  const atlas::FieldSet & fieldSet() const {return fset_;}
-  atlas::FieldSet & fieldSet() {return fset_;}
+  const atlas::FieldSet & fieldSet() const
+    {return fset_;}
+  atlas::FieldSet & fieldSet()
+    {return fset_;}
 
-// Utilities
+  // Utilities
   void read(const eckit::Configuration &);
   void write(const eckit::Configuration &) const;
   double norm() const;
-  std::shared_ptr<const Geometry> geometry() const {return geom_;}
-  const Variables & variables() const {return vars_;}
-  const util::DateTime & time() const {return time_;}
-  util::DateTime & time() {return time_;}
-  void updateTime(const util::Duration & dt) {time_ += dt;}
-
-/// Serialization
-  size_t serialSize() const override;
-  void serialize(std::vector<double> &) const override;
-  void deserialize(const std::vector<double> &, size_t &) override;
+  std::shared_ptr<const Geometry> geometry() const
+    {return geom_;}
+  const Variables & variables() const
+    {return vars_;}
+  const util::DateTime & time() const
+    {return time_;}
+  util::DateTime & time()
+    {return time_;}
+  void updateTime(const util::Duration & dt)
+    {time_ += dt;}
+
+  // Serialization
+  size_t serialSize() const;
+  void serialize(std::vector<double> &) const;
+  void deserialize(const std::vector<double> &,
+                   size_t &);
+
+  // Grid interpolations
+  static std::vector<quench::Interpolation>& interpolations();
 
  private:
-  void print(std::ostream &) const override;
+  // Print
+  void print(std::ostream &) const;
+
+  // Return grid interpolation
+  std::vector<quench::Interpolation>::iterator setupGridInterpolation(const Geometry &) const;
+
+  // Geometry
   std::shared_ptr<const Geometry> geom_;
+
+  // Variables
   Variables vars_;
+
+  // Time
   util::DateTime time_;
-  atlas::FieldSet fset_;
+
+  // Fieldset
+  mutable atlas::FieldSet fset_;
+
+/// ECSABER-specific definitions
+#include "src/FieldsECDef.h"
 };
+
 // -----------------------------------------------------------------------------
 
 }  // namespace quench
