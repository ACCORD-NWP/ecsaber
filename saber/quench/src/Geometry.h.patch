--- /home/benjaminm/code/oops-bundle/ecsaber/saber/quench/src/Geometry.h.tmp.bak	2024-06-12 18:33:06.994319458 +0200
+++ /home/benjaminm/code/oops-bundle/ecsaber/saber/quench/src/Geometry.h	2024-06-03 16:18:49.225939370 +0200
@@ -7,23 +7,19 @@
 
 #pragma once
 
-#include <memory>
 #include <ostream>
 #include <string>
 #include <unordered_map>
 #include <vector>
 
-#include "eckit/config/Configuration.h"
-
 #include "atlas/field.h"
 #include "atlas/functionspace.h"
 #include "atlas/grid.h"
 
 #include "eckit/mpi/Comm.h"
 
-#include "oops/mpi/mpi.h"
-
 #include "oops/base/Variables.h"
+#include "oops/mpi/mpi.h"
 #include "oops/util/ObjectCounter.h"
 #include "oops/util/parameters/OptionalParameter.h"
 #include "oops/util/parameters/Parameter.h"
@@ -31,6 +27,12 @@
 #include "oops/util/parameters/RequiredParameter.h"
 #include "oops/util/Printable.h"
 
+#include "src/Variables.h"
+
+namespace eckit {
+  class Configuration;
+}
+
 namespace quench {
 
 // -----------------------------------------------------------------------------
@@ -40,19 +42,19 @@
   OOPS_CONCRETE_PARAMETERS(OrographyParameters, Parameters)
 
  public:
-  /// Top longitude [degrees]
+  // Top longitude [degrees]
   oops::RequiredParameter<double> topLon{"top longitude", this};
 
-  /// Top latitude [degrees]
+  // Top latitude [degrees]
   oops::RequiredParameter<double> topLat{"top latitude", this};
 
-  /// Zonal length [m]
+  // Zonal length [m]
   oops::RequiredParameter<double> zonalLength{"zonal length", this};
 
-  /// Meridional length [m]
+  // Meridional length [m]
   oops::RequiredParameter<double> meridionalLength{"meridional length", this};
 
-  /// Height (% of the bottom layer thickness, or absolute value if one level only)
+  // Height (% of the bottom layer thickness, or absolute value if one level only)
   oops::RequiredParameter<double> height{"height", this};
 };
 
@@ -63,25 +65,29 @@
   OOPS_CONCRETE_PARAMETERS(GroupParameters, Parameters)
 
  public:
-  /// Variables
+  // Variables
   oops::RequiredParameter<std::vector<std::string>> variables{"variables", this};
 
-  /// Number of levels
+  // Number of levels
   oops::Parameter<size_t> levels{"levels", 1, this};
 
-  /// Corresponding level for 2D variables (first or last)
+  // Corresponding level for 2D variables (first or last)
   oops::Parameter<std::string> lev2d{"lev2d", "first", this};
 
-  /// Orography
+  // Orography
   oops::OptionalParameter<OrographyParameters> orography{"orography", this};
 
-  /// Vertical coordinate
+  // Vertical coordinate
   oops::OptionalParameter<std::vector<double>> vert_coord{"vert_coord", this};
 
-  /// Mask type
+  // Vertical coordinate from file
+  oops::OptionalParameter<eckit::LocalConfiguration> vert_coordFromFile{"vert_coord from file",
+    this};
+
+  // Mask type
   oops::Parameter<std::string> maskType{"mask type", "none", this};
 
-  /// Mask path
+  // Mask path
   oops::Parameter<std::string> maskPath{"mask path", "../quench/data/landsea.nc", this};
 };
 
@@ -105,28 +111,28 @@
   OOPS_CONCRETE_PARAMETERS(GeometryParameters, Parameters)
 
  public:
-  /// Function space
+  // Function space
   oops::RequiredParameter<std::string> functionSpace{"function space", this};
 
-  /// Grid
+  // Grid
   oops::RequiredParameter<eckit::LocalConfiguration> grid{"grid", this};
 
-  /// Partitioner
+  // Partitioner
   oops::Parameter<std::string> partitioner{"partitioner", "equal_regions", this};
 
-  /// Variables groups
+  // Variables groups
   oops::RequiredParameter<std::vector<GroupParameters>> groups{"groups", this};
 
-  /// Halo size
+  // Halo size
   oops::Parameter<size_t> halo{"halo", 0, this};
 
-  /// No point on last task
+  // No point on last task
   oops::Parameter<bool> noPointOnLastTask{"no point on last task", false, this};
 
-  /// Levels top-down
+  // Levels top-down
   oops::Parameter<bool> levelsAreTopDown{"levels are top down", true, this};
 
-  /// Model data
+  // Model data
   oops::Parameter<eckit::LocalConfiguration> modelData{"model data", eckit::LocalConfiguration(),
     this};
 
@@ -135,60 +141,118 @@
 };
 
 // -----------------------------------------------------------------------------
-/// Geometry handles geometry for quench model.
+/// Geometry class
 
 class Geometry : public util::Printable,
                  private util::ObjectCounter<Geometry> {
  public:
-  static const std::string classname() {return "quench::Geometry";}
+  static const std::string classname()
+    {return "quench::Geometry";}
 
+  // Constructors
   Geometry(const eckit::Configuration &,
            const eckit::mpi::Comm & comm = oops::mpi::world());
   Geometry(const Geometry &);
 
-  const eckit::mpi::Comm & getComm() const {return comm_;}
-  size_t halo() const {return halo_;}
-  const atlas::Grid grid() const {return grid_;}
-  const std::string gridType() const {return gridType_;}
-  const atlas::grid::Partitioner partitioner() const {return partitioner_;}
-  const atlas::Mesh mesh() const {return mesh_;}
-  const atlas::FunctionSpace & functionSpace() const {return functionSpace_;}
-  const atlas::FieldSet & fields() const {return fields_;}
-  size_t levels(const size_t & groupIndex) const {return groups_[groupIndex].levels_;}
-  size_t levels(const std::string & var) const;
-  size_t groups() const {return groups_.size();}
-  size_t groupIndex(const std::string & var) const;
-
-  size_t variableSize(const std::string &) const;
-  size_t maskLevel(const std::string &, const size_t &) const;
+  // Variables sizes
   std::vector<size_t> variableSizes(const Variables & vars) const;
-  bool levelsAreTopDown() const {return levelsAreTopDown_;}
-  const eckit::LocalConfiguration & modelData() const {return modelData_;}
-  const std::vector<eckit::LocalConfiguration> & alias() const {return alias_;}
+
+  // Levels direction
+  bool levelsAreTopDown() const
+    {return levelsAreTopDown_;}
+
+  // Accessors
+  const eckit::mpi::Comm & getComm() const
+    {return comm_;}
+  const size_t halo() const
+    {return halo_;}
+  const atlas::Grid grid() const
+    {return grid_;}
+  const std::string gridType() const
+    {return gridType_;}
+  const atlas::grid::Partitioner partitioner() const
+    {return partitioner_;}
+  const atlas::Mesh mesh() const
+    {return mesh_;}
+  const atlas::FunctionSpace & functionSpace() const
+    {return functionSpace_;}
+  const atlas::FieldSet & fields() const
+    {return fields_;}
+  const size_t & levels(const size_t & groupIndex) const
+    {return groups_[groupIndex].levels_;}
+  const size_t & levels(const std::string & var) const
+    {return groups_[groupIndex_.at(var)].levels_;}
+  size_t groups() const
+    {return groups_.size();}
+  size_t groupIndex(const std::string & var) const
+    {return groupIndex_.at(var);}
+  const eckit::LocalConfiguration & modelData() const
+    {return modelData_;}
+  const std::vector<eckit::LocalConfiguration> & alias() const
+    {return alias_;}
 
  private:
+  // Print
   void print(std::ostream &) const;
-  void readSeaMask(const std::string &, const size_t &, const std::string &, atlas::Field &) const;
+
+  // Read land-sea mask
+  void readSeaMask(const std::string &,
+                   const size_t &,
+                   const std::string &,
+                   atlas::Field &) const;
+
+  // Communicator
   const eckit::mpi::Comm & comm_;
+
+  // Halo size
   size_t halo_;
+
+  // ATLAS grid
   atlas::Grid grid_;
+
+  // ATLAS grid type
   std::string gridType_;
+
+  // ATLAS grid partitioner
   atlas::grid::Partitioner partitioner_;
+
+  // ATLAS mesh
   atlas::Mesh mesh_;
+
+  // ATLAS function space
   atlas::FunctionSpace functionSpace_;
+
+  // Group name to group index mapping
   std::unordered_map<std::string, size_t> groupIndex_;
+
+  // Group data structure
   struct groupData {
     size_t levels_;
     std::string lev2d_;
-    std::vector<double> vert_coord_;
+    atlas::Field vert_coord_;
+    std::vector<double> vert_coord_avg_;
     double gmaskSize_;
   };
+
+  // Geometry fields
   atlas::FieldSet fields_;
+
+  // Groups
   std::vector<groupData> groups_;
+
+  // Levels direction
   bool levelsAreTopDown_;
+
+  // Model data configuration
   eckit::LocalConfiguration modelData_;
+
+  // Aliases
   std::vector<eckit::LocalConfiguration> alias_;
+
+/// ECSABER-specific interface
+#include "src/GeometryECDef.h"
 };
+
 // -----------------------------------------------------------------------------
 
 }  // namespace quench
