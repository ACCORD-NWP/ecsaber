--- /home/benjaminm/code/oops-bundle/ecsaber/saber/quench/src/Increment.h.tmp	2024-07-04 13:56:20.836087405 +0200
+++ /home/benjaminm/code/oops-bundle/ecsaber/saber/quench/src/Increment.h	2024-07-04 11:12:45.495034045 +0200
@@ -14,82 +14,114 @@
 
 #include "atlas/field.h"
 
-#include "oops/util/abor1_cpp.h"
+#include "eckit/exception/Exceptions.h"
+
+#include "oops/util/DateTime.h"
 #include "oops/util/ObjectCounter.h"
 #include "oops/util/Printable.h"
 #include "oops/util/Serializable.h"
 
 #include "src/Fields.h"
+#include "src/IncrementECInc.h"
 #include "src/State.h"
 
 namespace quench {
   class Geometry;
-  class State;
-
-/// Increment Class: Difference between two states
-/*!
- *  Some fields that are present in a State may not be present in
- *  an Increment. The Increment contains everything that is needed by
- *  the tangent-linear and adjoint models.
- */
 
 // -----------------------------------------------------------------------------
+/// Increment class
 
 class Increment : public util::Printable,
-                    public util::Serializable,
-                    private util::ObjectCounter<Increment> {
+                  public util::Serializable,
+                  private util::ObjectCounter<Increment> {
  public:
-  static const std::string classname() {return "quench::Increment";}
+  static const std::string classname()
+    {return "quench::Increment";}
 
-/// Constructor, destructor
-  Increment(const Geometry &, const Variables &, const util::DateTime &);
-  Increment(const Geometry &, const Increment &);
-  Increment(const Increment &, const bool);
-
-/// Basic operators
-  void diff(const State &, const State &);
-  void zero();
+  // Constructors/destructor
+  Increment(const Geometry &,
+            const Variables &,
+            const util::DateTime &);
+  Increment(const Geometry &,
+            const Increment &);
+  Increment(const Increment &,
+            const bool);
+
+  // Basic operators
+  void diff(const State &,
+            const State &);
+  void zero()
+    {fields_->zero();}
   void zero(const util::DateTime &);
-  void dirac(const eckit::Configuration &);
+  void dirac(const eckit::Configuration & config)
+    {fields_->dirac(config);}
   Increment & operator =(const Increment &);
   Increment & operator+=(const Increment &);
   Increment & operator-=(const Increment &);
   Increment & operator*=(const double &);
-  void axpy(const double &, const Increment &, const bool check = true);
-  double dot_product_with(const Increment &) const;
-  void schur_product_with(const Increment &);
-  void random();
-
-/// I/O and diagnostics
-  void read(const eckit::Configuration &);
-  void write(const eckit::Configuration &) const;
-  double norm() const {return fields_->norm();}
-  const util::DateTime & validTime() const {return fields_->time();}
-  void updateTime(const util::Duration & dt) {fields_->time() += dt;}
-
-/// ATLAS FieldSet accessor
-  void toFieldSet(atlas::FieldSet &) const;
-  void fromFieldSet(const atlas::FieldSet &);
-
-/// Access to fields
-  Fields & fields() {return *fields_;}
-  const Fields & fields() const {return *fields_;}
-  std::shared_ptr<const Geometry> geometry() const {return fields_->geometry();}
-
-/// Other
-  void accumul(const double &, const State &);
-  const Variables & variables() const {return fields_->variables();}
-
-/// Serialization
-  size_t serialSize() const override;
-  void serialize(std::vector<double> &) const override;
-  void deserialize(const std::vector<double> &, size_t &) override;
+  void axpy(const double &,
+            const Increment &,
+            const bool check = true);
+  double dot_product_with(const Increment & dx) const
+    {return fields_->dot_product_with(*dx.fields_);}
+  void schur_product_with(const Increment & dx)
+    {fields_->schur_product_with(*dx.fields_);}
+  void random()
+    {fields_->random();}
+
+  // I/O and diagnostics
+  void read(const eckit::Configuration & config)
+    {fields_->read(config);}
+  void write(const eckit::Configuration & config) const
+    {fields_->write(config);}
+  double norm() const
+    {return fields_->norm();}
+  const util::DateTime & validTime() const
+    {return fields_->time();}
+  void updateTime(const util::Duration & dt)
+    {fields_->time() += dt;}
+
+  // ATLAS FieldSet accessor
+  void toFieldSet(atlas::FieldSet & fset) const
+    {fields_->toFieldSet(fset);}
+  void fromFieldSet(const atlas::FieldSet & fset)
+    {fields_->fromFieldSet(fset);}
+
+  // Access to fields
+  Fields & fields()
+    {return *fields_;}
+  const Fields & fields() const
+    {return *fields_;}
+  std::shared_ptr<const Geometry> geometry() const
+    {return fields_->geometry();}
+
+  // Other
+  void accumul(const double & zz,
+               const State & xx)
+    {fields_->axpy(zz, xx.fields());}
+  const Variables & variables() const
+    {return fields_->variables();}
+
+  // Serialization
+  size_t serialSize() const
+    {return fields_->serialSize();}
+  void serialize(std::vector<double> & vect) const
+    {fields_->serialize(vect);}
+  void deserialize(const std::vector<double> & vect,
+                   size_t & index)
+    {fields_->deserialize(vect, index);}
 
-/// Data
  private:
-  void print(std::ostream &) const override;
+  // Print
+  void print(std::ostream &) const;
+
+  // Fields
   std::unique_ptr<Fields> fields_;
+
+/// ECSABER-specific definitions
+#include "src/IncrementECDef.h"
 };
+
 // -----------------------------------------------------------------------------
 
 }  // namespace quench
